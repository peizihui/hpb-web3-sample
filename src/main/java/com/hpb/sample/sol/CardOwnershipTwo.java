package com.hpb.sample.sol;

import io.hpb.web3.abi.EventEncoder;
import io.hpb.web3.abi.TypeReference;
import io.hpb.web3.abi.datatypes.*;
import io.hpb.web3.abi.datatypes.generated.*;
import io.hpb.web3.crypto.Credentials;
import io.hpb.web3.protocol.Web3;
import io.hpb.web3.protocol.core.DefaultBlockParameter;
import io.hpb.web3.protocol.core.RemoteCall;
import io.hpb.web3.protocol.core.methods.request.HpbFilter;
import io.hpb.web3.protocol.core.methods.response.Log;
import io.hpb.web3.protocol.core.methods.response.TransactionReceipt;
import io.hpb.web3.tuples.generated.Tuple2;
import io.hpb.web3.tuples.generated.Tuple9;
import io.hpb.web3.tx.Contract;
import io.hpb.web3.tx.TransactionManager;
import io.hpb.web3.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3.io/command_line.html">web3 command line tools</a>,
 * or the io.hpb.web3.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3/web3/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3 version 3.6.0.
 */
public class CardOwnershipTwo extends Contract {
    private static final String BINARY = "6000805460a060020a60ff021916905560e0604052602360808190527f68747470733a2f2f6170692e676f6473756e636861696e65642e636f6d2f636160a09081527f72642f000000000000000000000000000000000000000000000000000000000060c052620000749160109190620001fe565b5060008054600160a060020a03191633179055620000bb7f01ffc9a70000000000000000000000000000000000000000000000000000000064010000000062000191810204565b620000ef7f80ac58cd0000000000000000000000000000000000000000000000000000000064010000000062000191810204565b620001237f4f558e790000000000000000000000000000000000000000000000000000000064010000000062000191810204565b620001577f780e9d630000000000000000000000000000000000000000000000000000000064010000000062000191810204565b6200018b7f5b5e139f0000000000000000000000000000000000000000000000000000000064010000000062000191810204565b620002a3565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415620001c157600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152600c60205260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024157805160ff191683800117855562000271565b8280016001018555821562000271579182015b828111156200027157825182559160200191906001019062000254565b506200027f92915062000283565b5090565b620002a091905b808211156200027f57600081556001016200028a565b90565b6137c880620002b36000396000f3006080604052600436106103005763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461030557806305c4af9d1461033b57806306fdde03146103ca578063081812fc14610454578063095ea7b3146104885780630bbe0ee3146104ae5780630c340a2414610519578063100cdd911461052e57806318160ddd1461058357806319fa8f50146105aa5780631fa24aa7146105dc57806323b872dd146105f757806324a96d70146106215780632f745c591461066b578063396ed6001461068f5780633cb4ff3c146106a75780633f4ba83a146106bc57806342842e0e146106d157806342966c68146106fb5780634cc90115146107135780634f558e791461072b5780634f6ccce7146107435780634fb31a6a1461075b578063524773ce1461079b5780635bd9d9a5146107b05780635c975abb146107cb5780635dcbd8bb146107e05780636352211e1461080957806367025dcf1461082157806370a08231146108775780637a8b9b8514610898578063818d4b5d146108b35780638456cb59146108d7578063850e3760146108ec5780638dc107681461091e5780639188d31214610957578063943b82f11461096f57806395d89b41146109af578063986e82f2146109c4578063a22cb465146109e0578063a3f4df7e14610a06578063a5487e5114610a1b578063a71aec7314610a33578063a9059cbb14610a4f578063ad94d90114610a66578063b5cab1ce14610ac9578063b88d4fde14610ade578063bc734f0f14610b4d578063bcb3962114610b62578063c42cf53514610b77578063c87b56dd14610b98578063c968aab314610bb0578063caa1916814610bcb578063ce9fdb7014610bed578063ced28d7714610c2c578063d7643e1814610c78578063d80f862114610c8d578063dfb6a75f14610ca5578063e3c7336b14610cea578063e7cf548c14610f07578063e985e9c514610f1c578063eeffbe4e14610f43578063f030345214610f5b578063f5f23b5214610fbe578063f76f8d7814610fd9575b600080fd5b34801561031157600080fd5b50610327600160e060020a031960043516610fee565b604080519115158252519081900360200190f35b34801561034757600080fd5b5061035761ffff6004351661100d565b604080518a1515815260ff808b1660208301528981169282019290925290871660608201526080810186600481111561038c57fe5b60ff90811682529586166020820152938516604080860191909152928516606085015250909216608082015290519081900360a00195509350505050f35b3480156103d657600080fd5b506103df611168565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610419578181015183820152602001610401565b50505050905090810190601f1680156104465780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561046057600080fd5b5061046c6004356111a0565b60408051600160a060020a039092168252519081900360200190f35b34801561049457600080fd5b506104ac600160a060020a03600435166024356111bb565b005b3480156104ba57600080fd5b5060408051602060046044358181013583810280860185019096528085526104ac958335600160a060020a0390811696602480359092169636969560649592949301928291850190849080828437509497506111fb9650505050505050565b34801561052557600080fd5b5061046c611237565b34801561053a57600080fd5b50604080516020600480358082013583810280860185019096528085526104ac953695939460249493850192918291850190849080828437509497506112469650505050505050565b34801561058f57600080fd5b5061059861127a565b60408051918252519081900360200190f35b3480156105b657600080fd5b506105bf611280565b60408051600160e060020a03199092168252519081900360200190f35b3480156105e857600080fd5b506104ac60ff600435166112a4565b34801561060357600080fd5b506104ac600160a060020a03600435811690602435166044356112f9565b34801561062d57600080fd5b5061065461ffff6004351660ff602435811690604435811690606435166084351515611326565b6040805161ffff9092168252519081900360200190f35b34801561067757600080fd5b50610598600160a060020a03600435166024356113bc565b34801561069b57600080fd5b5061065460043561142c565b3480156106b357600080fd5b50610598611462565b3480156106c857600080fd5b506104ac611475565b3480156106dd57600080fd5b506104ac600160a060020a03600435811690602435166044356114fc565b34801561070757600080fd5b506104ac60043561152e565b34801561071f57600080fd5b5061065460043561155f565b34801561073757600080fd5b5061032760043561156d565b34801561074f57600080fd5b5061059860043561158a565b34801561076757600080fd5b506104ac61ffff6004351660ff60243581169060443581169060643581169060843581169060a43581169060c435166115a3565b3480156107a757600080fd5b50610598611856565b3480156107bc57600080fd5b5061032760ff6004351661185c565b3480156107d757600080fd5b50610327611871565b3480156107ec57600080fd5b506104ac61ffff6004351667ffffffffffffffff60243516611892565b34801561081557600080fd5b5061046c600435611970565b6040805160206004602480358281013584810280870186019097528086526104ac968435600160a060020a03169636966044959194909101929182918501908490808284375094975061199a9650505050505050565b34801561088357600080fd5b50610598600160a060020a03600435166119cf565b3480156108a457600080fd5b5061032760ff600435166119ea565b3480156108bf57600080fd5b50610327600160a060020a03600435166024356119ff565b3480156108e357600080fd5b506104ac611a25565b3480156108f857600080fd5b5061090861ffff60043516611ac2565b6040805160ff9092168252519081900360200190f35b34801561092a57600080fd5b50610936600435611ad0565b6040805161ffff938416815291909216602082015281519081900390910190f35b34801561096357600080fd5b50610936600435611afd565b34801561097b57600080fd5b5061098b61ffff60043516611b51565b6040805167ffffffffffffffff909316835290151560208301528051918290030190f35b3480156109bb57600080fd5b506103df611ba8565b3480156109d057600080fd5b5061098b61ffff60043516611bdf565b3480156109ec57600080fd5b506104ac600160a060020a03600435166024351515611c0c565b348015610a1257600080fd5b506103df611c90565b348015610a2757600080fd5b50610654600435611cc7565b348015610a3f57600080fd5b5061032761ffff60043516611cd5565b6104ac600160a060020a0360043516602435611d05565b348015610a7257600080fd5b50604080516020600460248035828101358481028087018601909752808652610327968435600160a060020a031696369660449591949091019291829185019084908082843750949750611d609650505050505050565b348015610ad557600080fd5b506103df611dc4565b348015610aea57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526104ac94600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750611e529650505050505050565b348015610b5957600080fd5b506104ac611e91565b348015610b6e57600080fd5b50610908611f19565b348015610b8357600080fd5b506104ac600160a060020a0360043516611f22565b348015610ba457600080fd5b506103df600435611f68565b348015610bbc57600080fd5b506104ac60ff6004351661200a565b348015610bd757600080fd5b5061065460ff6004351661ffff6024351661205b565b348015610bf957600080fd5b5061065461ffff6004351660ff60243581169060443581169060643581169060843581169060a4351660c43515156121ef565b348015610c3857600080fd5b5061065461ffff6004351660ff60243581169060443581169060643581169060843581169060a43581169060c43581169060e43516610104351515612287565b348015610c8457600080fd5b50610654612327565b348015610c9957600080fd5b50610654600435612336565b348015610cb157600080fd5b5061065461ffff6004351660ff60243581169060443581169060643581169060843581169060a43581169060c4351660e4351515612344565b348015610cf657600080fd5b506040805160206004803580820135838102808601850190965280855261065495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506123e19650505050505050565b348015610f1357600080fd5b50610598612570565b348015610f2857600080fd5b50610327600160a060020a0360043581169060243516612576565b348015610f4f57600080fd5b506106546004356125a4565b348015610f6757600080fd5b506040805160206004602480358281013584810280870186019097528086526104ac968435600160a060020a0316963696604495919490910192918291850190849080828437509497506125b29650505050505050565b348015610fca57600080fd5b506104ac60ff600435166125e7565b348015610fe557600080fd5b506103df61261c565b600160e060020a0319166000908152600c602052604090205460ff1690565b60008060008060008060008060006110236136bb565b61ffff8b16600090815260066020908152604091829020825161012081018452815460ff80821615158352610100820481169483019490945262010000810484169482019490945263010000008404831660608201529290916080840191640100000000900416600481111561109557fe5b60048111156110a057fe5b81526020016000820160059054906101000a900460ff1660ff1660ff1681526020016000820160069054906101000a900460ff1660ff1660ff1681526020016000820160079054906101000a900460ff1660ff1660ff1681526020016000820160089054906101000a900460ff1660ff1660ff16815250509050806000015181602001518260400151836060015184608001518560a001518660c001518760e00151886101000151995099509950995099509950995099509950509193959799909294969850565b60408051808201909152600e81527f476f647320556e636861696e656400000000000000000000000000000000000060208201525b90565b6000908152600e6020526040902054600160a060020a031690565b6111e26001828154811015156111cd57fe5b60009182526020909120015461ffff16611cd5565b15156111ed57600080fd5b6111f78282612653565b5050565b60005b8151811015611231576112298484848481518110151561121a57fe5b906020019060200201516112f9565b6001016111fe565b50505050565b600054600160a060020a031681565b60005b81518110156111f757611272828281518110151561126357fe5b9060200190602002015161152e565b600101611249565b60015490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b600054600160a060020a031633146112bb57600080fd5b60ff8082166000908152600360205260409020541615156112db57600080fd5b60ff166000908152600460205260409020805460ff19166001179055565b61130b6001828154811015156111cd57fe5b151561131657600080fd5b611321838383612709565b505050565b60006113306136bb565b600054600160a060020a0316331461134757600080fd5b6040805161012081018252600180825260ff808a166020840152600554169282019290925260608101919091526080810186600481111561138457fe5b815260ff861660208201526000604082018190526060820181905260809091015290506113b28782856127ae565b5095945050505050565b60006113c7836119cf565b82106113d257600080fd5b600160a060020a03831660009081526011602052604090208054839081106113f657fe5b90600052602060002090600691828204019190066005029054906101000a900464ffffffffff1664ffffffffff16905092915050565b600b80548290811061143a57fe5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b600060135461146f61127a565b03905090565b600054600160a060020a0316331461148c57600080fd5b60005474010000000000000000000000000000000000000000900460ff1615156114b557600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b806115073382612c41565b151561151257600080fd5b6112318484846020604051908101604052806000815250611e52565b803361153982611970565b600160a060020a03161461154c57600080fd5b6013805460010190556111f73383612ca0565b600780548290811061143a57fe5b6000908152600d6020526040902054600160a060020a0316151590565b600061159461127a565b821061159f57600080fd5b5090565b6115ab6136bb565b600054600160a060020a031633146115c257600080fd5b61ffff8816600090815260066020908152604091829020825161012081018452815460ff80821615158352610100820481169483019490945262010000810484169482019490945263010000008404831660608201529290916080840191640100000000900416600481111561163457fe5b600481111561163f57fe5b8152905460ff65010000000000820481166020808501919091526601000000000000830482166040808601919091526701000000000000008404831660608601526801000000000000000090930482166080909401939093528382015181166000908152600390935291205491925016156116b957600080fd5b610120604051908101604052806001151581526020018860ff168152602001826040015160ff1681526020018760ff168152602001826080015160048111156116fe57fe5b815260ff87811660208084019190915287821660408085019190915287831660608086019190915287841660809586015261ffff8e166000908152600684528290208651815494880151938801519288015160ff199095169015151761ff001916610100938616939093029290921762ff0000191662010000918516919091021763ff00000019166301000000929093169190910291909117808255918301519091829064ff0000000019166401000000008360048111156117bc57fe5b021790555060a0820151815460c084015160e08501516101009095015165ff0000000000199092166501000000000060ff948516021766ff00000000000019166601000000000000918416919091021767ff000000000000001916670100000000000000948316949094029390931768ff000000000000000019166801000000000000000091909316029190911790555050505050505050565b60135481565b60046020526000908152604090205460ff1681565b60005474010000000000000000000000000000000000000000900460ff1681565b61189a613707565b600054600160a060020a031633146118b157600080fd5b5061ffff821660009081526002602090815260409182902082518084019093525467ffffffffffffffff8116835268010000000000000000900460ff161580159183019190915261190157600080fd5b5060408051808201825267ffffffffffffffff92831681526001602080830191825261ffff90951660009081526002909552919093209251835491511515680100000000000000000268ff0000000000000000199190931667ffffffffffffffff199092169190911716179055565b6000818152600d6020526040812054600160a060020a031680151561199457600080fd5b92915050565b60005b8151811015611321576119c78383838151811015156119b857fe5b90602001906020020151611d05565b60010161199d565b600160a060020a031660009081526011602052604090205490565b60036020526000908152604090205460ff1681565b600082600160a060020a0316611a1483611970565b600160a060020a0316149392505050565b600054600160a060020a03163314611a3c57600080fd5b60005474010000000000000000000000000000000000000000900460ff1615611a6457600080fd5b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b6103e861ffff919091160490565b6001805482908110611ade57fe5b60009182526020909120015461ffff8082169250620100009091041682565b600080611b08613707565b6001805485908110611b1657fe5b60009182526020918290206040805180820190915291015461ffff808216808452620100009092041691909201819052909590945092505050565b600080611b5c613707565b50505061ffff1660009081526002602090815260409182902082518084019093525467ffffffffffffffff81168084526801000000000000000090910460ff1615159290910182905291565b60408051808201909152600481527f474f445300000000000000000000000000000000000000000000000000000000602082015290565b60026020526000908152604090205467ffffffffffffffff81169068010000000000000000900460ff1682565b600160a060020a038216331415611c2257600080fd5b336000818152600f60209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b60408051808201909152600e81527f476f647320556e636861696e6564000000000000000000000000000000000000602082015281565b600a80548290811061143a57fe5b61ffff1660009081526006602090815260408083205462010000900460ff90811684526003909252909120541690565b8033611d1082611970565b600160a060020a031614611d2357600080fd5b611d356001838154811015156111cd57fe5b1515611d4057600080fd5b600160a060020a0383161515611d5557600080fd5b611321338484612cf0565b60008060008351111515611d7357600080fd5b5060005b8251811015611db857611da1848483815181101515611d9257fe5b906020019060200201516119ff565b1515611db05760009150611dbd565b600101611d77565b600191505b5092915050565b6010805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611e4a5780601f10611e1f57610100808354040283529160200191611e4a565b820191906000526020600020905b815481529060010190602001808311611e2d57829003601f168201915b505050505081565b81611e5d3382612c41565b1515611e6857600080fd5b611e738585856112f9565b611e7f85858585612d54565b1515611e8a57600080fd5b5050505050565b600054600160a060020a03163314611ea857600080fd5b60055460ff9081161115611ebb57600080fd5b6005805460ff8082166001011660ff199091161790556000611ede60078261371e565b506000611eec60088261371e565b506000611efa60098261371e565b506000611f08600a8261371e565b506000611f16600b8261371e565b50565b60055460ff1681565b600054600160a060020a03163314611f3957600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6010805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181526060936119949391929091830182828015611ff75780601f10611fcc57610100808354040283529160200191611ff7565b820191906000526020600020905b815481529060010190602001808311611fda57829003601f168201915b505050505061200584612ec1565b612fb4565b600054600160a060020a0316331461202157600080fd5b60ff808216600090815260046020526040902054161561204057600080fd5b60ff166000908152600360205260409020805460ff19169055565b6000808080808087600481111561206e57fe5b14156120be57600b805461ffff881681151561208657fe5b0681548110151561209357fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff1694506121e5565b60018760048111156120cc57fe5b14156120e457600a805461ffff881681151561208657fe5b60028760048111156120f257fe5b141561210a576009805461ffff881681151561208657fe5b600387600481111561211857fe5b1415612130576008805461ffff881681151561208657fe5b600487600481111561213e57fe5b1415610300575060005b6007548110156121d3576007805461ffff8816830181151561216657fe5b0681548110151561217357fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff1693506121a284611b51565b90935091508180156121be575060008367ffffffffffffffff16115b156121cb578394506121e5565b600101612148565b6008805461ffff881681151561208657fe5b5050505092915050565b60006121f96136bb565b600054600160a060020a0316331461221057600080fd5b60408051610120810182526001815260ff808b1660208301526005541691810191909152600360608201526080810188600481111561224b57fe5b815260ff80891660208301528781166040830152861660608201526000608090910152905061227b8982856127ae565b50979650505050505050565b60006122916136bb565b600054600160a060020a031633146122a857600080fd5b60408051610120810182526001815260ff808d1660208301526005548116928201929092529086166060820152608081018a60048111156122e557fe5b81526020018960ff1681526020018860ff1681526020018760ff1681526020018560ff1681525090506123198b82856127ae565b509998505050505050505050565b600554610100900461ffff1681565b600980548290811061143a57fe5b600061234e6136bb565b600054600160a060020a0316331461236557600080fd5b60408051610120810182526001815260ff808c166020830152600554169181019190915260026060820152608081018960048111156123a057fe5b81526020018860ff1681526020018760ff1681526020018660ff1681526020018560ff1681525090506123d48a82856127ae565b5098975050505050505050565b6000806123ec6136bb565b600054600160a060020a0316331461240357600080fd5b600091505b8b5182101561256157610120604051908101604052806001151581526020018c8481518110151561243557fe5b602090810290910181015160ff90811683526005541690820152875160409091019088908590811061246357fe5b9060200190602002015160ff1681526020018b8481518110151561248357fe5b90602001906020020151600481111561249857fe5b81526020018a848151811015156124ab57fe5b9060200190602002015160ff16815260200189848151811015156124cb57fe5b9060200190602002015160ff16815260200188848151811015156124eb57fe5b9060200190602002015160ff168152602001868481518110151561250b57fe5b9060200190602002015160ff1681525090506125568c8381518110151561252e57fe5b9060200190602002015182868581518110151561254757fe5b906020019060200201516127ae565b600190910190612408565b50509998505050505050505050565b60135490565b600160a060020a039182166000908152600f6020908152604080832093909416825291909152205460ff1690565b600880548290811061143a57fe5b60005b8151811015611321576125df8383838151811015156125d057fe5b906020019060200201516111bb565b6001016125b5565b600054600160a060020a031633146125fe57600080fd5b60ff166000908152600360205260409020805460ff19166001179055565b60408051808201909152600481527f474f445300000000000000000000000000000000000000000000000000000000602082015281565b600061265e82611970565b9050600160a060020a03838116908216141561267957600080fd5b33600160a060020a038216148061269557506126958133612576565b15156126a057600080fd5b6000828152600e6020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b806127143382612c41565b151561271f57600080fd5b600160a060020a038416151561273457600080fd5b600160a060020a038316151561274957600080fd5b6127538483612ff0565b61275d848361305f565b61276783836132c0565b8183600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b61ffff831660009081526006602052604081205460ff16156127cf57600080fd5b6001835261ffff8416600090815260066020908152604091829020855181549287015193870151606088015160ff199094169115159190911761ff00191661010060ff958616021762ff0000191662010000918516919091021763ff000000191663010000009390921692909202178082556080850151859291829064ff00000000191664010000000083600481111561286557fe5b021790555060a08201518160000160056101000a81548160ff021916908360ff16021790555060c08201518160000160066101000a81548160ff021916908360ff16021790555060e08201518160000160076101000a81548160ff021916908360ff1602179055506101008201518160000160086101000a81548160ff021916908360ff1602179055509050506005600181819054906101000a900461ffff168092919060010191906101000a81548161ffff021916908361ffff160217905550507f2f7e8f79713fd202353aaa4d413bb73a3bc66d59a540f646415fd9acee7e59c684600560009054906101000a900460ff16856020015186608001518760a001518860c001518960e001518a606001518b61010001518b604051808b61ffff1661ffff1681526020018a60ff1660ff1681526020018960ff1660ff1681526020018860048111156129b457fe5b60ff90811682529788166020820152958716604080880191909152948716606087015250918516608085015290931660a083015291151560c082015290519081900360e001945092505050a18115611231575060808201516000816004811115612a1a57fe5b1415612a7d57600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db960108204018054600f9092166002026101000a61ffff8181021990931692871602919091179055611231565b6001816004811115612a8b57fe5b1415612aee57600a80546001810182556000919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a860108204018054600f9092166002026101000a61ffff8181021990931692871602919091179055611231565b6002816004811115612afc57fe5b1415612b5f57600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af60108204018054600f9092166002026101000a61ffff8181021990931692871602919091179055611231565b6003816004811115612b6d57fe5b1415612bd057600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee360108204018054600f9092166002026101000a61ffff8181021990931692871602919091179055611231565b6004816004811115612bde57fe5b141561030057600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68860108204018054600f9092166002026101000a61ffff8181021990931692871602919091179055611231565b600080612c4d83611970565b905080600160a060020a031684600160a060020a03161480612c88575083600160a060020a0316612c7d846111a0565b600160a060020a0316145b80612c985750612c988185612576565b949350505050565b612caa8282612ff0565b612cb4828261305f565b6040518190600090600160a060020a038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b612cfa8382612ff0565b612d04838261305f565b612d0e82826132c0565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600080612d6985600160a060020a0316613391565b1515612d785760019150612eb8565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015612e0b578181015183820152602001612df3565b50505050905090810190601f168015612e385780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015612e5a57600080fd5b505af1158015612e6e573d6000803e3d6000fd5b505050506040513d6020811015612e8457600080fd5b5051600160e060020a031981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b60606000808281851515612f0a5760408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201529450612fab565b8593505b8315612f2557600190920191600a84049350612f0e565b826040519080825280601f01601f191660200182016040528015612f53578160200160208202803883390190505b5091505060001982015b8515612fa757815160001982019160f860020a6030600a8a060102918491908110612f8457fe5b906020010190600160f860020a031916908160001a905350600a86049550612f5d565b8194505b50505050919050565b604080516020818101835260008083528351808301855281815284519283019094528152606092612fe9928692869290613399565b9392505050565b81600160a060020a031661300382611970565b600160a060020a03161461301657600080fd5b6000818152600e6020526040902054600160a060020a0316156111f7576000908152600e60205260409020805473ffffffffffffffffffffffffffffffffffffffff1916905550565b600080600061306e85856135fa565b601280548590811061307c57fe5b60009182526020808320600883040154600160a060020a0389168452601190915260409092205460079091166004026101000a90910463ffffffff90811694506130ca919060019061364c16565b600160a060020a0386166000908152601160205260409020805491935090839081106130f257fe5b90600052602060002090600691828204019190066005029054906101000a900464ffffffffff169050806011600087600160a060020a0316600160a060020a031681526020019081526020016000208463ffffffff1681548110151561315457fe5b90600052602060002090600691828204019190066005026101000a81548164ffffffffff021916908364ffffffffff16021790555060006011600087600160a060020a0316600160a060020a03168152602001908152602001600020838154811015156131bd57fe5b90600052602060002090600691828204019190066005026101000a81548164ffffffffff021916908364ffffffffff1602179055506011600086600160a060020a0316600160a060020a0316815260200190815260200160002080548091906001900361322a9190613752565b50600060128581548110151561323c57fe5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055508260128264ffffffffff1681548110151561328657fe5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505050505050565b60006132cc838361365e565b50600160a060020a03821660009081526011602052604090205463ffffffff811681146132f857600080fd5b600160a060020a038316600090815260116020908152604082208054600181018255908352912060068083049091018054919092066005026101000a64ffffffffff8181021990921691851602179055601280548291908490811061335957fe5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550505050565b6000903b1190565b6060806060806060806060806000808e98508d97508c96508b95508a94508451865188518a518c51010101016040519080825280601f01601f1916602001820160405280156133f2578160200160208202803883390190505b50935083925060009150600090505b885181101561345f57888181518110151561341857fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561343f57fe5b906020010190600160f860020a031916908160001a905350600101613401565b5060005b87518110156134c157878181518110151561347a57fe5b90602001015160f860020a900460f860020a0283838060010194508151811015156134a157fe5b906020010190600160f860020a031916908160001a905350600101613463565b5060005b86518110156135235786818151811015156134dc57fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561350357fe5b906020010190600160f860020a031916908160001a9053506001016134c5565b5060005b855181101561358557858181518110151561353e57fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561356557fe5b906020010190600160f860020a031916908160001a905350600101613527565b5060005b84518110156135e75784818151811015156135a057fe5b90602001015160f860020a900460f860020a0283838060010194508151811015156135c757fe5b906020010190600160f860020a031916908160001a905350600101613589565b50909d9c50505050505050505050505050565b81600160a060020a031661360d82611970565b600160a060020a03161461362057600080fd5b6000908152600d60205260409020805473ffffffffffffffffffffffffffffffffffffffff1916905550565b60008282111561365857fe5b50900390565b6000818152600d6020526040902054600160a060020a03161561368057600080fd5b6000908152600d60205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6040805161012081018252600080825260208201819052918101829052606081018290529060808201908152600060208201819052604082018190526060820181905260809091015290565b604080518082019091526000808252602082015290565b81548183558181111561132157600f016010900481600f016010900483600052602060002091820191016113219190613782565b81548183558181111561132157600501600690048160050160069004836000526020600020918201910161132191905b61119d91905b8082111561159f57600081556001016137885600a165627a7a723058204a4202d2ff9469ebf6c45732f4421236bc7cb42ecf945118656508c140d414110029";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_GETPROTO = "getProto";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_TRANSFERALLFROM = "transferAllFrom";

    public static final String FUNC_GOVERNOR = "governor";

    public static final String FUNC_BURNALL = "burnAll";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_INTERFACEID_ERC165 = "InterfaceId_ERC165";

    public static final String FUNC_MAKEPERMANANTLYTRADABLE = "makePermanantlyTradable";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_ADDSPELL = "addSpell";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_COMMON = "common";

    public static final String FUNC_GETACTIVECARDS = "getActiveCards";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_MYTHIC = "mythic";

    public static final String FUNC_EXISTS = "exists";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_REPLACEPROTO = "replaceProto";

    public static final String FUNC_BURNCOUNT = "burnCount";

    public static final String FUNC_SEASONTRADABILITYLOCKED = "seasonTradabilityLocked";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_SETLIMIT = "setLimit";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_TRANSFERALL = "transferAll";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_SEASONTRADABLE = "seasonTradable";

    public static final String FUNC_OWNS = "owns";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_GETSHINE = "getShine";

    public static final String FUNC_CARDS = "cards";

    public static final String FUNC_GETCARD = "getCard";

    public static final String FUNC_GETLIMIT = "getLimit";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_LIMITS = "limits";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

//    public static final String FUNC_NAME = "NAME";

    public static final String FUNC_RARE = "rare";

    public static final String FUNC_ISTRADABLE = "isTradable";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_OWNSALL = "ownsAll";

    public static final String FUNC_TOKENMETADATABASEURI = "tokenMetadataBaseURI";

    public static final String FUNC_NEXTSEASON = "nextSeason";

    public static final String FUNC_CURRENTSEASON = "currentSeason";

    public static final String FUNC_SETGOVERNOR = "setGovernor";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_MAKEUNTRADABLE = "makeUntradable";

    public static final String FUNC_GETRANDOMCARD = "getRandomCard";

    public static final String FUNC_ADDWEAPON = "addWeapon";

    public static final String FUNC_ADDPROTO = "addProto";

    public static final String FUNC_PROTOCOUNT = "protoCount";

    public static final String FUNC_EPIC = "epic";

    public static final String FUNC_ADDMINION = "addMinion";

    public static final String FUNC_ADDPROTOS = "addProtos";

    public static final String FUNC_GETBURNCOUNT = "getBurnCount";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_LEGENDARY = "legendary";

    public static final String FUNC_APPROVEALL = "approveAll";

    public static final String FUNC_MAKETRADABLE = "makeTradable";

//    public static final String FUNC_SYMBOL = "SYMBOL";

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event NEWPROTOCARD_EVENT = new Event("NewProtoCard",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event PAUSE_EVENT = new Event("Pause",
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event UNPAUSE_EVENT = new Event("Unpause",
            Arrays.<TypeReference<?>>asList());
    ;

    @Deprecated
    protected CardOwnershipTwo(String contractAddress, Web3 web3, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3, credentials, gasPrice, gasLimit);
    }

  /*  protected CardOwnershipTwo(String contractAddress, Web3 web3, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3, credentials, contractGasProvider);
    }*/

    @Deprecated
    protected CardOwnershipTwo(String contractAddress, Web3 web3, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3, transactionManager, gasPrice, gasLimit);
    }

    protected CardOwnershipTwo(String contractAddress, Web3 web3, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3, transactionManager, contractGasProvider);
    }

    public RemoteCall<Boolean> supportsInterface(byte[] _interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Bytes4(_interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple9<Boolean, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getProto(BigInteger id) {
        final Function function = new Function(FUNC_GETPROTO,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint16(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple9<Boolean, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple9<Boolean, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple9<Boolean, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<Boolean, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (Boolean) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue(),
                                (BigInteger) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getApproved(BigInteger _tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String to, BigInteger id) {
        final Function function = new Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(to),
                        new io.hpb.web3.abi.datatypes.generated.Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferAllFrom(String from, String to, List<BigInteger> ids) {
        final Function function = new Function(
                FUNC_TRANSFERALLFROM,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(from),
                        new io.hpb.web3.abi.datatypes.Address(to),
                        new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint256>(
                                io.hpb.web3.abi.Utils.typeMap(ids, io.hpb.web3.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> governor() {
        final Function function = new Function(FUNC_GOVERNOR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> burnAll(List<BigInteger> ids) {
        final Function function = new Function(
                FUNC_BURNALL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint256>(
                        io.hpb.web3.abi.Utils.typeMap(ids, io.hpb.web3.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<byte[]> InterfaceId_ERC165() {
        final Function function = new Function(FUNC_INTERFACEID_ERC165,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> makePermanantlyTradable(BigInteger season) {
        final Function function = new Function(
                FUNC_MAKEPERMANANTLYTRADABLE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint8(season)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String from, String to, BigInteger id) {
        final Function function = new Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(from),
                        new io.hpb.web3.abi.datatypes.Address(to),
                        new io.hpb.web3.abi.datatypes.generated.Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addSpell(BigInteger externalID, BigInteger god, BigInteger rarity, BigInteger mana, Boolean packable) {
        final Function function = new Function(
                FUNC_ADDSPELL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint16(externalID),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(god),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(rarity),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(mana),
                        new io.hpb.web3.abi.datatypes.Bool(packable)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> tokenOfOwnerByIndex(String _owner, BigInteger _index) {
        final Function function = new Function(FUNC_TOKENOFOWNERBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_owner),
                        new io.hpb.web3.abi.datatypes.generated.Uint256(_index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> common(BigInteger param0) {
        final Function function = new Function(FUNC_COMMON,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getActiveCards() {
        final Function function = new Function(FUNC_GETACTIVECARDS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> safeTransferFrom(String _from, String _to, BigInteger _tokenId) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_from),
                        new io.hpb.web3.abi.datatypes.Address(_to),
                        new io.hpb.web3.abi.datatypes.generated.Uint256(_tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> burn(BigInteger id) {
        final Function function = new Function(
                FUNC_BURN,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> mythic(BigInteger param0) {
        final Function function = new Function(FUNC_MYTHIC,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> exists(BigInteger _tokenId) {
        final Function function = new Function(FUNC_EXISTS,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> tokenByIndex(BigInteger _index) {
        final Function function = new Function(FUNC_TOKENBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(_index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> replaceProto(BigInteger index, BigInteger god, BigInteger cardType, BigInteger mana, BigInteger attack, BigInteger health, BigInteger tribe) {
        final Function function = new Function(
                FUNC_REPLACEPROTO,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint16(index),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(god),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(cardType),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(mana),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(attack),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(health),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(tribe)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> burnCount() {
        final Function function = new Function(FUNC_BURNCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> seasonTradabilityLocked(BigInteger param0) {
        final Function function = new Function(FUNC_SEASONTRADABILITYLOCKED,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint8(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> setLimit(BigInteger id, BigInteger limit) {
        final Function function = new Function(
                FUNC_SETLIMIT,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint16(id),
                        new io.hpb.web3.abi.datatypes.generated.Uint64(limit)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> ownerOf(BigInteger _tokenId) {
        final Function function = new Function(FUNC_OWNEROF,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transferAll(String to, List<BigInteger> ids, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_TRANSFERALL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(to),
                        new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint256>(
                                io.hpb.web3.abi.Utils.typeMap(ids, io.hpb.web3.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> seasonTradable(BigInteger param0) {
        final Function function = new Function(FUNC_SEASONTRADABLE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint8(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> owns(String proposed, BigInteger id) {
        final Function function = new Function(FUNC_OWNS,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(proposed),
                        new io.hpb.web3.abi.datatypes.generated.Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getShine(BigInteger purity) {
        final Function function = new Function(FUNC_GETSHINE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint16(purity)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> cards(BigInteger param0) {
        final Function function = new Function(FUNC_CARDS,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> getCard(BigInteger id) {
        final Function function = new Function(FUNC_GETCARD,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<BigInteger, Boolean>> getLimit(BigInteger id) {
        final Function function = new Function(FUNC_GETLIMIT,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint16(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple2<BigInteger, Boolean>>(
                new Callable<Tuple2<BigInteger, Boolean>>() {
                    @Override
                    public Tuple2<BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(),
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, Boolean>> limits(BigInteger param0) {
        final Function function = new Function(FUNC_LIMITS,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint16(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple2<BigInteger, Boolean>>(
                new Callable<Tuple2<BigInteger, Boolean>>() {
                    @Override
                    public Tuple2<BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(),
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setApprovalForAll(String _to, Boolean _approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_to),
                        new io.hpb.web3.abi.datatypes.Bool(_approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> NAME() {
        final Function function = new Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> rare(BigInteger param0) {
        final Function function = new Function(FUNC_RARE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> isTradable(BigInteger proto) {
        final Function function = new Function(FUNC_ISTRADABLE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint16(proto)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String to, BigInteger id, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_TRANSFER,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(to),
                        new io.hpb.web3.abi.datatypes.generated.Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Boolean> ownsAll(String proposed, List<BigInteger> ids) {
        final Function function = new Function(FUNC_OWNSALL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(proposed),
                        new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint256>(
                                io.hpb.web3.abi.Utils.typeMap(ids, io.hpb.web3.abi.datatypes.generated.Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> tokenMetadataBaseURI() {
        final Function function = new Function(FUNC_TOKENMETADATABASEURI,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> safeTransferFrom(String _from, String _to, BigInteger _tokenId, byte[] _data) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_from),
                        new io.hpb.web3.abi.datatypes.Address(_to),
                        new io.hpb.web3.abi.datatypes.generated.Uint256(_tokenId),
                        new io.hpb.web3.abi.datatypes.DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> nextSeason() {
        final Function function = new Function(
                FUNC_NEXTSEASON,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> currentSeason() {
        final Function function = new Function(FUNC_CURRENTSEASON,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setGovernor(String _gov) {
        final Function function = new Function(
                FUNC_SETGOVERNOR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_gov)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> tokenURI(BigInteger _tokenId) {
        final Function function = new Function(FUNC_TOKENURI,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> makeUntradable(BigInteger season) {
        final Function function = new Function(
                FUNC_MAKEUNTRADABLE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint8(season)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getRandomCard(BigInteger rarity, BigInteger random) {
        final Function function = new Function(FUNC_GETRANDOMCARD,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint8(rarity),
                        new io.hpb.web3.abi.datatypes.generated.Uint16(random)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addWeapon(BigInteger externalID, BigInteger god, BigInteger rarity, BigInteger mana, BigInteger attack, BigInteger durability, Boolean packable) {
        final Function function = new Function(
                FUNC_ADDWEAPON,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint16(externalID),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(god),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(rarity),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(mana),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(attack),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(durability),
                        new io.hpb.web3.abi.datatypes.Bool(packable)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addProto(BigInteger externalID, BigInteger god, BigInteger rarity, BigInteger mana, BigInteger attack, BigInteger health, BigInteger cardType, BigInteger tribe, Boolean packable) {
        final Function function = new Function(
                FUNC_ADDPROTO,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint16(externalID),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(god),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(rarity),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(mana),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(attack),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(health),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(cardType),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(tribe),
                        new io.hpb.web3.abi.datatypes.Bool(packable)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> protoCount() {
        final Function function = new Function(FUNC_PROTOCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> epic(BigInteger param0) {
        final Function function = new Function(FUNC_EPIC,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addMinion(BigInteger externalID, BigInteger god, BigInteger rarity, BigInteger mana, BigInteger attack, BigInteger health, BigInteger tribe, Boolean packable) {
        final Function function = new Function(
                FUNC_ADDMINION,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint16(externalID),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(god),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(rarity),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(mana),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(attack),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(health),
                        new io.hpb.web3.abi.datatypes.generated.Uint8(tribe),
                        new io.hpb.web3.abi.datatypes.Bool(packable)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addProtos(List<BigInteger> externalIDs, List<BigInteger> gods, List<BigInteger> rarities, List<BigInteger> manas, List<BigInteger> attacks, List<BigInteger> healths, List<BigInteger> cardTypes, List<BigInteger> tribes, List<Boolean> packable) {
        final Function function = new Function(
                FUNC_ADDPROTOS,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint16>(
                                io.hpb.web3.abi.Utils.typeMap(externalIDs, io.hpb.web3.abi.datatypes.generated.Uint16.class)),
                        new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint8>(
                                io.hpb.web3.abi.Utils.typeMap(gods, io.hpb.web3.abi.datatypes.generated.Uint8.class)),
                        new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint8>(
                                io.hpb.web3.abi.Utils.typeMap(rarities, io.hpb.web3.abi.datatypes.generated.Uint8.class)),
                        new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint8>(
                                io.hpb.web3.abi.Utils.typeMap(manas, io.hpb.web3.abi.datatypes.generated.Uint8.class)),
                        new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint8>(
                                io.hpb.web3.abi.Utils.typeMap(attacks, io.hpb.web3.abi.datatypes.generated.Uint8.class)),
                        new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint8>(
                                io.hpb.web3.abi.Utils.typeMap(healths, io.hpb.web3.abi.datatypes.generated.Uint8.class)),
                        new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint8>(
                                io.hpb.web3.abi.Utils.typeMap(cardTypes, io.hpb.web3.abi.datatypes.generated.Uint8.class)),
                        new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint8>(
                                io.hpb.web3.abi.Utils.typeMap(tribes, io.hpb.web3.abi.datatypes.generated.Uint8.class)),
                        new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Bool>(
                                io.hpb.web3.abi.Utils.typeMap(packable, io.hpb.web3.abi.datatypes.Bool.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getBurnCount() {
        final Function function = new Function(FUNC_GETBURNCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> isApprovedForAll(String _owner, String _operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_owner),
                        new io.hpb.web3.abi.datatypes.Address(_operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> legendary(BigInteger param0) {
        final Function function = new Function(FUNC_LEGENDARY,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> approveAll(String to, List<BigInteger> ids) {
        final Function function = new Function(
                FUNC_APPROVEALL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(to),
                        new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint256>(
                                io.hpb.web3.abi.Utils.typeMap(ids, io.hpb.web3.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> makeTradable(BigInteger season) {
        final Function function = new Function(
                FUNC_MAKETRADABLE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint8(season)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> SYMBOL() {
        final Function function = new Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventObservable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventObservable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalForAllEventResponse> approvalForAllEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ApprovalForAllEventResponse> approvalForAllEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventObservable(filter);
    }

    public List<NewProtoCardEventResponse> getNewProtoCardEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWPROTOCARD_EVENT, transactionReceipt);
        ArrayList<NewProtoCardEventResponse> responses = new ArrayList<NewProtoCardEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewProtoCardEventResponse typedResponse = new NewProtoCardEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.season = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.god = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.rarity = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.mana = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.attack = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.health = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.cardType = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.tribe = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
            typedResponse.packable = (Boolean) eventValues.getNonIndexedValues().get(9).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewProtoCardEventResponse> newProtoCardEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, NewProtoCardEventResponse>() {
            @Override
            public NewProtoCardEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWPROTOCARD_EVENT, log);
                NewProtoCardEventResponse typedResponse = new NewProtoCardEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.season = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.god = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.rarity = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.mana = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.attack = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.health = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.cardType = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
                typedResponse.tribe = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
                typedResponse.packable = (Boolean) eventValues.getNonIndexedValues().get(9).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewProtoCardEventResponse> newProtoCardEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWPROTOCARD_EVENT));
        return newProtoCardEventObservable(filter);
    }

    public List<PauseEventResponse> getPauseEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSE_EVENT, transactionReceipt);
        ArrayList<PauseEventResponse> responses = new ArrayList<PauseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PauseEventResponse typedResponse = new PauseEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PauseEventResponse> pauseEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, PauseEventResponse>() {
            @Override
            public PauseEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSE_EVENT, log);
                PauseEventResponse typedResponse = new PauseEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Observable<PauseEventResponse> pauseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSE_EVENT));
        return pauseEventObservable(filter);
    }

    public List<UnpauseEventResponse> getUnpauseEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSE_EVENT, transactionReceipt);
        ArrayList<UnpauseEventResponse> responses = new ArrayList<UnpauseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpauseEventResponse typedResponse = new UnpauseEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnpauseEventResponse> unpauseEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, UnpauseEventResponse>() {
            @Override
            public UnpauseEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSE_EVENT, log);
                UnpauseEventResponse typedResponse = new UnpauseEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Observable<UnpauseEventResponse> unpauseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSE_EVENT));
        return unpauseEventObservable(filter);
    }

  /*  public static RemoteCall<CardOwnershipTwo> deploy(Web3 web3, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CardOwnershipTwo.class, web3, credentials, contractGasProvider, BINARY, "");
    }*/

    @Deprecated
    public static RemoteCall<CardOwnershipTwo> deploy(Web3 web3, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CardOwnershipTwo.class, web3, credentials, gasPrice, gasLimit, BINARY, "");
    }

/*    public static RemoteCall<CardOwnershipTwo> deploy(Web3 web3, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CardOwnershipTwo.class, web3, transactionManager, contractGasProvider, BINARY, "");
    }*/

    @Deprecated
    public static RemoteCall<CardOwnershipTwo> deploy(Web3 web3, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CardOwnershipTwo.class, web3, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static CardOwnershipTwo load(String contractAddress, Web3 web3, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CardOwnershipTwo(contractAddress, web3, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CardOwnershipTwo load(String contractAddress, Web3 web3, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CardOwnershipTwo(contractAddress, web3, transactionManager, gasPrice, gasLimit);
    }

/*    public static CardOwnershipTwo load(String contractAddress, Web3 web3, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CardOwnershipTwo(contractAddress, web3, credentials, contractGasProvider);
    }*/

    public static CardOwnershipTwo load(String contractAddress, Web3 web3, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CardOwnershipTwo(contractAddress, web3, transactionManager, contractGasProvider);
    }

    public static class TransferEventResponse {
        public Log log;

        public String _from;

        public String _to;

        public BigInteger _tokenId;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String _owner;

        public String _approved;

        public BigInteger _tokenId;
    }

    public static class ApprovalForAllEventResponse {
        public Log log;

        public String _owner;

        public String _operator;

        public Boolean _approved;
    }

    public static class NewProtoCardEventResponse {
        public Log log;

        public BigInteger id;

        public BigInteger season;

        public BigInteger god;

        public BigInteger rarity;

        public BigInteger mana;

        public BigInteger attack;

        public BigInteger health;

        public BigInteger cardType;

        public BigInteger tribe;

        public Boolean packable;
    }

    public static class PauseEventResponse {
        public Log log;
    }

    public static class UnpauseEventResponse {
        public Log log;
    }
}
