package com.hpb.sample.sol;

import io.hpb.web3.abi.TypeReference;
import io.hpb.web3.abi.datatypes.*;
import io.hpb.web3.abi.datatypes.generated.Bytes32;
import io.hpb.web3.abi.datatypes.generated.Bytes4;
import io.hpb.web3.abi.datatypes.generated.Uint256;
import io.hpb.web3.crypto.Credentials;
import io.hpb.web3.protocol.Web3;
import io.hpb.web3.protocol.core.RemoteCall;
import io.hpb.web3.protocol.core.methods.response.Log;
import io.hpb.web3.protocol.core.methods.response.TransactionReceipt;
import io.hpb.web3.tuples.generated.Tuple2;
import io.hpb.web3.tuples.generated.Tuple3;
import io.hpb.web3.tuples.generated.Tuple4;
import io.hpb.web3.tx.Contract;
import io.hpb.web3.tx.TransactionManager;
import io.hpb.web3.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the io.hpb.web3.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class HpbContractProxy extends Contract {
    private static final String BINARY = "60008054600160a060020a031990811633908117835580835260016020819052604080852080548516841790556004805480840182557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805486169055610100909152608083905260a085905260c085905260e08590526007805492830181558552027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688810180549093169091179091557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68981018290557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a81018290557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b0155615fb68061012f6000396000f3fe6080604052600436106104555760e060020a6000350462d5876b811461048d578062f7858d146104be5780630304363a1461051a578063062ff957146105c857806307e3fcb01461060d578063081b8bb41461065a578063091317151461068457806309f41822146107325780630d0ed6b9146108695780630d4d0b4c146108e35780630fbafdb014610a1a578063107e56cb14610a5357806310fee72614610b8a578063116c47fe14610cba57806311944c4c14610cf557806311dd46b414610daa5780631391ff4314610dbf57806314b5ce3a14610df257806316f6261114610e2b5780631a0a617d14610e5e57806326dfdac614610e9757806327e1f7df14610ec1578063297a167714610ef45780632ba6e3651461102c5780632cf459051461106d5780632e1a7d4d146112a157806338afec8e146112be57806338b47120146112ff5780633acd75f8146113ad5780633c9d0f29146113e05780633f7d39691461141b57806341c0e1b51461143057806343540c3214611438578063449b79fb1461156f5780634a8b7b4e146115ab5780634af9487f146115d55780634e694dba146115ff5780634e85a0e1146116325780634ed2e770146116715780635645c0be1461171f57806356e70578146117555780635b68a49d146118035780635c679f7b1461183c5780635c8573331461196c5780635f74bbde146119a7578063605c89f7146119e057806365e24fe214611a215780636712a67f14611a5957806367202d4014611c8d5780636873439914611cb75780636b43dc5914611d6c5780636e1119b414611e215780636e46b43514611e365780636fb84e8414611e775780637048027514611eb0578063705a061014611ee3578063753cb4eb14611f1e57806375a4ea5214611f515780637b6e49a814611f8c5780637eed48ac14611fc5578063816194f8146120f557806382ccecdd1461210a57806384b00eb614612241578063875496751461227a578063893d20e8146122bd57806389aaa4a7146122d25780638da5cb5b146123055780638e30b0581461231a5780638ff95fb51461234d5780639438b3ac1461247d57806395f11ce6146124b05780639e3f8ab3146124e3578063a6fec45b146124f8578063a99e02bf14612531578063ab2d2c0b1461256c578063b219e87b14612581578063b355d691146125ba578063b8b359b8146125cf578063bfdd702b1461260e578063c75c6a0614612623578063c7dcdcaa1461275a578063cba378dc1461276f578063cc5f024014612799578063ce9f10ab146128c9578063cf556f2214612977578063d0b42f9214612a25578063d101118514612ada578063d2d3d7fb14612b0d578063d3c932c214612b22578063dbbc830b14612b55578063df81539814612b88578063e00d0f3d14612bde578063e4aa287614612c1f578063e6252c0f14612d4f578063e6c2a37614612d82578063f25d242214612db5578063f2fde38b14612de8578063fb4e781c14612e1b578063fd32f08814612f0e575b60408051348152905133917f7129701436f0cdc265d1e2cda298e8a1ccd6ed5fce7f69343e16530b07a2e06e919081900360200190a2005b34801561049957600080fd5b506104a2612f38565b60408051600160a060020a039092168252519081900360200190f35b3480156104ca57600080fd5b50610501600480360360408110156104e157600080fd5b508035600160a060020a03169060200135600160e060020a031916612f47565b6040805192835260208301919091528051918290030190f35b34801561052657600080fd5b5061052f612ffd565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561057357818101518382015260200161055b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105b257818101518382015260200161059a565b5050505090500194505050505060405180910390f35b3480156105d457600080fd5b506105fb600480360360208110156105eb57600080fd5b5035600160a060020a031661301a565b60408051918252519081900360200190f35b34801561061957600080fd5b506106466004803603604081101561063057600080fd5b5080359060200135600160a060020a0316613034565b604080519115158252519081900360200190f35b34801561066657600080fd5b506106466004803603602081101561067d57600080fd5b50356130cc565b34801561069057600080fd5b50610646600480360360208110156106a757600080fd5b810190602081018135602060020a8111156106c157600080fd5b8201836020820111156106d357600080fd5b803590602001918460208302840111602060020a831117156106f457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613146945050505050565b34801561073e57600080fd5b506106466004803603606081101561075557600080fd5b81359190810190604081016020820135602060020a81111561077657600080fd5b82018360208201111561078857600080fd5b803590602001918460208302840111602060020a831117156107a957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a8111156107f857600080fd5b82018360208201111561080a57600080fd5b803590602001918460208302840111602060020a8311171561082b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613185945050505050565b34801561087557600080fd5b506108936004803603602081101561088c57600080fd5b50356132aa565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156108cf5781810151838201526020016108b7565b505050509050019250505060405180910390f35b3480156108ef57600080fd5b506106466004803603606081101561090657600080fd5b81359190810190604081016020820135602060020a81111561092757600080fd5b82018360208201111561093957600080fd5b803590602001918460208302840111602060020a8311171561095a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a8111156109a957600080fd5b8201836020820111156109bb57600080fd5b803590602001918460208302840111602060020a831117156109dc57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061337f945050505050565b348015610a2657600080fd5b5061064660048036036040811015610a3d57600080fd5b5080359060200135600160a060020a03166133e3565b348015610a5f57600080fd5b5061064660048036036060811015610a7657600080fd5b81359190810190604081016020820135602060020a811115610a9757600080fd5b820183602082011115610aa957600080fd5b803590602001918460208302840111602060020a83111715610aca57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a811115610b1957600080fd5b820183602082011115610b2b57600080fd5b803590602001918460208302840111602060020a83111715610b4c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613448945050505050565b348015610b9657600080fd5b5061064660048036036040811015610bad57600080fd5b810190602081018135602060020a811115610bc757600080fd5b820183602082011115610bd957600080fd5b803590602001918460208302840111602060020a83111715610bfa57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a811115610c4957600080fd5b820183602082011115610c5b57600080fd5b803590602001918460208302840111602060020a83111715610c7c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506134a1945050505050565b348015610cc657600080fd5b5061064660048036036040811015610cdd57600080fd5b50600160a060020a03813581169160200135166134bd565b348015610d0157600080fd5b5061064660048036036040811015610d1857600080fd5b81359190810190604081016020820135602060020a811115610d3957600080fd5b820183602082011115610d4b57600080fd5b803590602001918460208302840111602060020a83111715610d6c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506134d2945050505050565b348015610db657600080fd5b5061064661351d565b348015610dcb57600080fd5b5061052f60048036036020811015610de257600080fd5b5035600160a060020a0316613536565b348015610dfe57600080fd5b506104a260048036036040811015610e1557600080fd5b5080359060200135600160a060020a0316613554565b348015610e3757600080fd5b506105fb60048036036020811015610e4e57600080fd5b5035600160a060020a03166135cb565b348015610e6a57600080fd5b5061052f60048036036040811015610e8157600080fd5b5080359060200135600160a060020a03166135dd565b348015610ea357600080fd5b5061052f60048036036020811015610eba57600080fd5b503561371e565b348015610ecd57600080fd5b5061064660048036036020811015610ee457600080fd5b5035600160a060020a0316613889565b348015610f0057600080fd5b50610f096138f3565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b83811015610f55578181015183820152602001610f3d565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015610f94578181015183820152602001610f7c565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015610fd3578181015183820152602001610fbb565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015611012578181015183820152602001610ffa565b505050509050019850505050505050505060405180910390f35b34801561103857600080fd5b506106466004803603606081101561104f57600080fd5b50803590600160a060020a0360208201358116916040013516613afd565b34801561107957600080fd5b506106466004803603608081101561109057600080fd5b810190602081018135602060020a8111156110aa57600080fd5b8201836020820111156110bc57600080fd5b803590602001918460208302840111602060020a831117156110dd57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a81111561112c57600080fd5b82018360208201111561113e57600080fd5b803590602001918460208302840111602060020a8311171561115f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a8111156111ae57600080fd5b8201836020820111156111c057600080fd5b803590602001918460208302840111602060020a831117156111e157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a81111561123057600080fd5b82018360208201111561124257600080fd5b803590602001918460208302840111602060020a8311171561126357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613b76945050505050565b610646600480360360208110156112b757600080fd5b5035613d0d565b3480156112ca57600080fd5b506105fb600480360360608110156112e157600080fd5b50803590600160a060020a0360208201358116916040013516613d6c565b34801561130b57600080fd5b506106466004803603602081101561132257600080fd5b810190602081018135602060020a81111561133c57600080fd5b82018360208201111561134e57600080fd5b803590602001918460208302840111602060020a8311171561136f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613df7945050505050565b3480156113b957600080fd5b50610646600480360360208110156113d057600080fd5b5035600160a060020a0316613e69565b3480156113ec57600080fd5b506106466004803603604081101561140357600080fd5b50600160a060020a0381358116916020013516613e7d565b34801561142757600080fd5b50610893613e92565b610646613ea5565b34801561144457600080fd5b506106466004803603606081101561145b57600080fd5b81359190810190604081016020820135602060020a81111561147c57600080fd5b82018360208201111561148e57600080fd5b803590602001918460208302840111602060020a831117156114af57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a8111156114fe57600080fd5b82018360208201111561151057600080fd5b803590602001918460208302840111602060020a8311171561153157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613ecb945050505050565b34801561157b57600080fd5b506106466004803603604081101561159257600080fd5b50600160e060020a031981358116916020013516613f24565b3480156115b757600080fd5b50610893600480360360208110156115ce57600080fd5b5035614523565b3480156115e157600080fd5b506104a2600480360360208110156115f857600080fd5b503561465b565b34801561160b57600080fd5b506106466004803603602081101561162257600080fd5b5035600160a060020a0316614683565b34801561163e57600080fd5b506106466004803603606081101561165557600080fd5b50803590600160a060020a03602082013516906040013561472b565b34801561167d57600080fd5b5061052f6004803603602081101561169457600080fd5b810190602081018135602060020a8111156116ae57600080fd5b8201836020820111156116c057600080fd5b803590602001918460208302840111602060020a831117156116e157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506147a9945050505050565b34801561172b57600080fd5b506106466004803603606081101561174257600080fd5b50803590602081013590604001356148a1565b34801561176157600080fd5b506106466004803603602081101561177857600080fd5b810190602081018135602060020a81111561179257600080fd5b8201836020820111156117a457600080fd5b803590602001918460208302840111602060020a831117156117c557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614903945050505050565b34801561180f57600080fd5b506106466004803603604081101561182657600080fd5b50600160a060020a038135169060200135614917565b34801561184857600080fd5b506106466004803603604081101561185f57600080fd5b810190602081018135602060020a81111561187957600080fd5b82018360208201111561188b57600080fd5b803590602001918460208302840111602060020a831117156118ac57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a8111156118fb57600080fd5b82018360208201111561190d57600080fd5b803590602001918460208302840111602060020a8311171561192e57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061492c945050505050565b34801561197857600080fd5b506105fb6004803603604081101561198f57600080fd5b50600160a060020a0381358116916020013516614941565b3480156119b357600080fd5b50610646600480360360408110156119ca57600080fd5b50600160a060020a038135169060200135614956565b3480156119ec57600080fd5b5061064660048036036060811015611a0357600080fd5b50803590600160a060020a036020820135811691604001351661496b565b348015611a2d57600080fd5b50611a366149e4565b60408051600160a060020a03909316835260208301919091528051918290030190f35b348015611a6557600080fd5b5061064660048036036080811015611a7c57600080fd5b810190602081018135602060020a811115611a9657600080fd5b820183602082011115611aa857600080fd5b803590602001918460208302840111602060020a83111715611ac957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a811115611b1857600080fd5b820183602082011115611b2a57600080fd5b803590602001918460208302840111602060020a83111715611b4b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a811115611b9a57600080fd5b820183602082011115611bac57600080fd5b803590602001918460208302840111602060020a83111715611bcd57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a811115611c1c57600080fd5b820183602082011115611c2e57600080fd5b803590602001918460208302840111602060020a83111715611c4f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614a21945050505050565b348015611c9957600080fd5b5061052f60048036036020811015611cb057600080fd5b5035614bf3565b348015611cc357600080fd5b5061064660048036036040811015611cda57600080fd5b81359190810190604081016020820135602060020a811115611cfb57600080fd5b820183602082011115611d0d57600080fd5b803590602001918460208302840111602060020a83111715611d2e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614d16945050505050565b348015611d7857600080fd5b5061064660048036036040811015611d8f57600080fd5b81359190810190604081016020820135602060020a811115611db057600080fd5b820183602082011115611dc257600080fd5b803590602001918460208302840111602060020a83111715611de357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614d4d945050505050565b348015611e2d57600080fd5b506104a2614d8e565b348015611e4257600080fd5b5061064660048036036060811015611e5957600080fd5b50803590600160a060020a0360208201358116916040013516614d9d565b348015611e8357600080fd5b5061052f60048036036040811015611e9a57600080fd5b5080359060200135600160a060020a0316614e16565b348015611ebc57600080fd5b5061064660048036036020811015611ed357600080fd5b5035600160a060020a0316614e7a565b348015611eef57600080fd5b5061064660048036036040811015611f0657600080fd5b50600160a060020a0381358116916020013516614ee7565b348015611f2a57600080fd5b506105fb60048036036020811015611f4157600080fd5b5035600160a060020a0316614efc565b348015611f5d57600080fd5b5061064660048036036040811015611f7457600080fd5b50600160a060020a0381358116916020013516614f10565b348015611f9857600080fd5b506105fb60048036036040811015611faf57600080fd5b5080359060200135600160a060020a0316614f25565b348015611fd157600080fd5b5061064660048036036040811015611fe857600080fd5b810190602081018135602060020a81111561200257600080fd5b82018360208201111561201457600080fd5b803590602001918460208302840111602060020a8311171561203557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a81111561208457600080fd5b82018360208201111561209657600080fd5b803590602001918460208302840111602060020a831117156120b757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614f88945050505050565b34801561210157600080fd5b50610646614f9d565b34801561211657600080fd5b506106466004803603606081101561212d57600080fd5b81359190810190604081016020820135602060020a81111561214e57600080fd5b82018360208201111561216057600080fd5b803590602001918460208302840111602060020a8311171561218157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a8111156121d057600080fd5b8201836020820111156121e257600080fd5b803590602001918460208302840111602060020a8311171561220357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614fb0945050505050565b34801561224d57600080fd5b506105fb6004803603604081101561226457600080fd5b5080359060200135600160a060020a0316615009565b34801561228657600080fd5b506106466004803603604081101561229d57600080fd5b508035600160a060020a03169060200135600160e060020a03191661506c565b3480156122c957600080fd5b506104a26150ec565b3480156122de57600080fd5b50610646600480360360208110156122f557600080fd5b5035600160a060020a03166150fb565b34801561231157600080fd5b506104a2615144565b34801561232657600080fd5b506106466004803603602081101561233d57600080fd5b5035600160a060020a0316615153565b34801561235957600080fd5b506106466004803603604081101561237057600080fd5b810190602081018135602060020a81111561238a57600080fd5b82018360208201111561239c57600080fd5b803590602001918460208302840111602060020a831117156123bd57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a81111561240c57600080fd5b82018360208201111561241e57600080fd5b803590602001918460208302840111602060020a8311171561243f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550615167945050505050565b34801561248957600080fd5b50610646600480360360208110156124a057600080fd5b5035600160a060020a031661517c565b3480156124bc57600080fd5b50610646600480360360208110156124d357600080fd5b5035600160a060020a03166151c5565b3480156124ef57600080fd5b5061052f6151d9565b34801561250457600080fd5b506106466004803603604081101561251b57600080fd5b5080359060200135600160a060020a03166153f1565b34801561253d57600080fd5b506106466004803603604081101561255457600080fd5b50600160a060020a0381358116916020013516615456565b34801561257857600080fd5b5061052f6154f8565b34801561258d57600080fd5b50610646600480360360408110156125a457600080fd5b5080359060200135600160a060020a031661550c565b3480156125c657600080fd5b50610893615571565b3480156125db57600080fd5b50610646600480360360608110156125f257600080fd5b50803590600160a060020a0360208201351690604001356156b3565b34801561261a57600080fd5b506104a2615731565b34801561262f57600080fd5b506106466004803603606081101561264657600080fd5b81359190810190604081016020820135602060020a81111561266757600080fd5b82018360208201111561267957600080fd5b803590602001918460208302840111602060020a8311171561269a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a8111156126e957600080fd5b8201836020820111156126fb57600080fd5b803590602001918460208302840111602060020a8311171561271c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550615740945050505050565b34801561276657600080fd5b5061052f615825565b34801561277b57600080fd5b5061052f6004803603602081101561279257600080fd5b503561591b565b3480156127a557600080fd5b50610646600480360360408110156127bc57600080fd5b810190602081018135602060020a8111156127d657600080fd5b8201836020820111156127e857600080fd5b803590602001918460208302840111602060020a8311171561280957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a81111561285857600080fd5b82018360208201111561286a57600080fd5b803590602001918460208302840111602060020a8311171561288b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550615962945050505050565b3480156128d557600080fd5b50610646600480360360208110156128ec57600080fd5b810190602081018135602060020a81111561290657600080fd5b82018360208201111561291857600080fd5b803590602001918460208302840111602060020a8311171561293957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550615977945050505050565b34801561298357600080fd5b506106466004803603602081101561299a57600080fd5b810190602081018135602060020a8111156129b457600080fd5b8201836020820111156129c657600080fd5b803590602001918460208302840111602060020a831117156129e757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061598b945050505050565b348015612a3157600080fd5b5061064660048036036040811015612a4857600080fd5b81359190810190604081016020820135602060020a811115612a6957600080fd5b820183602082011115612a7b57600080fd5b803590602001918460208302840111602060020a83111715612a9c57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061599f945050505050565b348015612ae657600080fd5b5061064660048036036020811015612afd57600080fd5b5035600160a060020a03166159e0565b348015612b1957600080fd5b5061052f6159f4565b348015612b2e57600080fd5b506104a260048036036020811015612b4557600080fd5b5035600160a060020a0316615a08565b348015612b6157600080fd5b506104a260048036036020811015612b7857600080fd5b5035600160a060020a0316615a1c565b348015612b9457600080fd5b50612bb260048036036020811015612bab57600080fd5b5035615a37565b60408051600160a060020a039093168352600160e060020a031990911660208301528051918290030190f35b348015612bea57600080fd5b5061064660048036036060811015612c0157600080fd5b50803590600160a060020a0360208201358116916040013516615ac4565b348015612c2b57600080fd5b5061064660048036036040811015612c4257600080fd5b810190602081018135602060020a811115612c5c57600080fd5b820183602082011115612c6e57600080fd5b803590602001918460208302840111602060020a83111715612c8f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050602060020a811115612cde57600080fd5b820183602082011115612cf057600080fd5b803590602001918460208302840111602060020a83111715612d1157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550615b3d945050505050565b348015612d5b57600080fd5b5061064660048036036020811015612d7257600080fd5b5035600160a060020a0316615b52565b348015612d8e57600080fd5b5061050160048036036020811015612da557600080fd5b5035600160a060020a0316615d20565b348015612dc157600080fd5b5061052f60048036036020811015612dd857600080fd5b5035600160a060020a0316615d3f565b348015612df457600080fd5b5061064660048036036020811015612e0b57600080fd5b5035600160a060020a0316615d54565b348015612e2757600080fd5b50612e30615da6565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015612e78578181015183820152602001612e60565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015612eb7578181015183820152602001612e9f565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015612ef6578181015183820152602001612ede565b50505050905001965050505050505060405180910390f35b348015612f1a57600080fd5b5061064660048036036020811015612f3157600080fd5b5035615e49565b600354600160a060020a031681565b600080612f52615e91565b604080517ef7858d000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152600160e060020a031987166024830152825193169262f7858d92604480840193919291829003018186803b158015612fbf57600080fd5b505afa158015612fd3573d6000803e3d6000fd5b505050506040513d6040811015612fe957600080fd5b508051602090910151909590945092505050565b60608061301160016004805490500361591b565b915091505b9091565b60045460009061302e906000190183614f25565b92915050565b600061303f83615ebb565b600160a060020a0316638e30b058836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561309957600080fd5b505af11580156130ad573d6000803e3d6000fd5b505050506040513d60208110156130c357600080fd5b50519392505050565b60006130d782615ebb565b600160a060020a031663816194f86040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561311457600080fd5b505af1158015613128573d6000803e3d6000fd5b505050506040513d602081101561313e57600080fd5b505192915050565b6000805b825181101561317c57613173838281518110151561316457fe5b90602001906020020151615153565b5060010161314a565b50600192915050565b600061319084615ebb565b600160a060020a031663d3cc0c373385856040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561320f5781810151838201526020016131f7565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561324e578181015183820152602001613236565b5050505090500195505050505050602060405180830381600087803b15801561327657600080fd5b505af115801561328a573d6000803e3d6000fd5b505050506040513d60208110156132a057600080fd5b5051949350505050565b60606132b582615ebb565b600160a060020a0316633f7d39696040518163ffffffff1660e060020a02815260040160006040518083038186803b1580156132f057600080fd5b505afa158015613304573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561332d57600080fd5b810190808051602060020a81111561334457600080fd5b8201602081018481111561335757600080fd5b81518560208202830111602060020a8211171561337357600080fd5b50909695505050505050565b6000805b83518110156133d8576133c585858381518110151561339e57fe5b9060200190602002015185848151811015156133b657fe5b90602001906020020151615ac4565b15156133d057600080fd5b600101613383565b506001949350505050565b60006133ee83615ebb565b600160a060020a0316633acd75f8836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561309957600080fd5b6000805b83518110156133d85761348e85858381518110151561346757fe5b90602001906020020151858481518110151561347f57fe5b90602001906020020151614d9d565b151561349957600080fd5b60010161344c565b6004546000906134b690600019018484614fb0565b9392505050565b6004546000906134b69060001901848461496b565b6000805b8251811015613513576135008484838151811015156134f157fe5b906020019060200201516133e3565b151561350b57600080fd5b6001016134d6565b5060019392505050565b6004546000906135309060001901615e49565b90505b90565b60608061354b60016004805490500384614e16565b91509150915091565b600061355f83615ebb565b600160a060020a031663d3c932c2836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156135b757600080fd5b505afa1580156130ad573d6000803e3d6000fd5b60056020526000908152604090205481565b6060806135e984615ebb565b600160a060020a031663f25d2422846040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060006040518083038186803b15801561364157600080fd5b505afa158015613655573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561367e57600080fd5b810190808051602060020a81111561369557600080fd5b820160208101848111156136a857600080fd5b81518560208202830111602060020a821117156136c457600080fd5b50509291906020018051602060020a8111156136df57600080fd5b820160208101848111156136f257600080fd5b81518560208202830111602060020a8211171561370e57600080fd5b5094999098509650505050505050565b606080606061372c84615ebb565b600160a060020a031663a82588ca6040518163ffffffff1660e060020a02815260040160006040518083038186803b15801561376757600080fd5b505afa15801561377b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156137a457600080fd5b810190808051602060020a8111156137bb57600080fd5b820160208101848111156137ce57600080fd5b81518560208202830111602060020a821117156137ea57600080fd5b5050929190505050905060608151604051908082528060200260200182016040528015613821578160200160208202803883390190505b50905060005b825181101561387e5761385186848381518110151561384257fe5b90602001906020020151613554565b828281518110151561385f57fe5b600160a060020a03909216602092830290910190910152600101613827565b509092509050915091565b60008054600160a060020a031633146138a157600080fd5b600160a060020a038281166000908152600160205260409020541615156138c757600080fd5b50600160a060020a031660009081526001602081905260409091208054600160a060020a031916905590565b606080606080600160078054905011151561390d57600080fd5b60075460408051600019909201808352602080820284010190915290606090828015613943578160200160208202803883390190505b509050606082604051908082528060200260200182016040528015613972578160200160208202803883390190505b5090506060836040519080825280602002602001820160405280156139a1578160200160208202803883390190505b5090506060846040519080825280602002602001820160405280156139d0578160200160208202803883390190505b50905060015b600754811015613aed5760078054829081106139ee57fe5b60009182526020909120600490910201548551600160a060020a039091169086906000198401908110613a1d57fe5b600160a060020a039092166020928302909101909101526007805482908110613a4257fe5b9060005260206000209060040201600101548460018303815181101515613a6557fe5b602090810290910101526007805482908110613a7d57fe5b9060005260206000209060040201600201548360018303815181101515613aa057fe5b602090810290910101526007805482908110613ab857fe5b9060005260206000209060040201600301548260018303815181101515613adb57fe5b602090810290910101526001016139d6565b5092989197509550909350915050565b6000613b0884615ebb565b604080517f705a0610000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015285811660248301529151929091169163705a0610916044808201926020929091908290030181600087803b15801561327657600080fd5b6000613b80615ef2565b600160a060020a0316632cf45905868686866040518563ffffffff1660e060020a0281526004018080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b83811015613bf0578181015183820152602001613bd8565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015613c2f578181015183820152602001613c17565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015613c6e578181015183820152602001613c56565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015613cad578181015183820152602001613c95565b5050505090500198505050505050505050602060405180830381600087803b158015613cd857600080fd5b505af1158015613cec573d6000803e3d6000fd5b505050506040513d6020811015613d0257600080fd5b505195945050505050565b60008054600160a060020a03163314613d2557600080fd5b3031821115613d3357600080fd5b60008054604051600160a060020a039091169184156108fc02918591818181858888f1935050505015801561317c573d6000803e3d6000fd5b6000613d7784615ebb565b604080517f5c857333000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152858116602483015291519290911691635c85733391604480820192602092909190829003018186803b158015613de357600080fd5b505afa15801561328a573d6000803e3d6000fd5b33600090815260016020526040812054600160a060020a03161515613e1b57600080fd5b600754600110613e2a57600080fd5b60005b825181101561317c57613e568382815181101515613e4757fe5b90602001906020020151615b52565b1515613e6157600080fd5b600101613e2d565b60045460009061302e9060001901836133e3565b6004546000906134b690600019018484614d9d565b60045460609061353090600019016132aa565b60008054600160a060020a03163314613ebd57600080fd5b600054600160a060020a0316ff5b6000805b83518110156133d857613f11858583815181101515613eea57fe5b906020019060200201518584815181101515613f0257fe5b90602001906020020151613afd565b1515613f1c57600080fd5b600101613ecf565b33600090815260016020526040812054600160a060020a03161515613f4857600080fd5b600754600110613f5757600080fd5b60075460408051600019909201808352602080820284010190915290606090828015613f8d578160200160208202803883390190505b509050606082604051908082528060200260200182016040528015613fbc578160200160208202803883390190505b509050606083604051908082528060200260200182016040528015613feb578160200160208202803883390190505b50905060608460405190808252806020026020018201604052801561401a578160200160208202803883390190505b50905060015b60075481101561413757600780548290811061403857fe5b60009182526020909120600490910201548551600160a060020a03909116908690600019840190811061406757fe5b600160a060020a03909216602092830290910190910152600780548290811061408c57fe5b90600052602060002090600402016001015484600183038151811015156140af57fe5b6020908102909101015260078054829081106140c757fe5b90600052602060002090600402016002015483600183038151811015156140ea57fe5b60209081029091010152600780548290811061410257fe5b906000526020600020906004020160030154826001830381518110151561412557fe5b60209081029091010152600101614020565b50614140615ef2565b600160a060020a0316639508614b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561417d57600080fd5b505af1158015614191573d6000803e3d6000fd5b505050506040513d60208110156141a757600080fd5b505115156141b457600080fd5b6141bc615ef2565b600160a060020a0316632cf45905858585856040518563ffffffff1660e060020a0281526004018080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561422c578181015183820152602001614214565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561426b578181015183820152602001614253565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156142aa578181015183820152602001614292565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156142e95781810151838201526020016142d1565b5050505090500198505050505050505050602060405180830381600087803b15801561431457600080fd5b505af1158015614328573d6000803e3d6000fd5b505050506040513d602081101561433e57600080fd5b5051151561434b57600080fd5b60048054600019810190811061435d57fe5b60009182526020909120015460068054600160a060020a031916600160a060020a0390921691909117905530600160e060020a0319891615156143cf57604080517f6665746368526573756c74466f724e6f646573282900000000000000000000008152905190819003601501902098505b6000806143dc6002615a37565b9092509050600160a060020a038083169084161415806144095750600160e060020a0319818116908c1614155b1561444f57614418838c61506c565b151561442357600080fd5b600080614430858e612f47565b9092509050614441600283836148a1565b151561444c57600080fd5b50505b600160e060020a03198a16151561449557604080517f6665746368416c6c486f6c6465724164647273466f724e6f64657328290000008152905190819003601d01902099505b60006144a16003615a37565b9093509050600160a060020a038084169085161415806144ce5750600160e060020a0319818116908c1614155b15614514576144dd848c61506c565b15156144e857600080fd5b6000806144f5868e612f47565b9092509050614506600383836148a1565b151561451157600080fd5b50505b50505050505050505092915050565b606080606061453184614bf3565b90925090506000805b835181101561459257838181518110151561455157fe5b90602001906020020151600160a060020a031631838281518110151561457357fe5b90602001906020020151111561458a576001909101905b60010161453a565b506060816040519080825280602002602001820160405280156145bf578160200160208202803883390190505b5090506000805b85518110156133735785818151811015156145dd57fe5b90602001906020020151600160a060020a03163185828151811015156145ff57fe5b90602001906020020151111561465357858181518110151561461d57fe5b90602001906020020151838381518110151561463557fe5b600160a060020a039092166020928302909101909101526001909101905b6001016145c6565b600480548290811061466957fe5b600091825260209091200154600160a060020a0316905081565b33600090815260016020526040812054600160a060020a031615156146a757600080fd5b600160a060020a038216600090815260056020526040902054156146ca57600080fd5b506004805460018181019092557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b81018054600160a060020a038516600160a060020a03199091168117909155600090815260056020526040902055919050565b600061473684615ebb565b604080517fe94bc926000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a038681166024830152604482018690529151929091169163e94bc926916064808201926020929091908290030181600087803b15801561327657600080fd5b6060806000835190506060816040519080825280602002602001820160405280156147de578160200160208202803883390190505b50905060608260405190808252806020026020018201604052801561480d578160200160208202803883390190505b50905060005b838110156148955761483b878281518110151561482c57fe5b9060200190602002015161301a565b838281518110151561484957fe5b60209081029091010152865187908290811061486157fe5b90602001906020020151600160a060020a031631828281518110151561488357fe5b60209081029091010152600101614813565b50909350915050915091565b60006148ab615e91565b600160a060020a0316635645c0be8585856040518463ffffffff1660e060020a028152600401808481526020018381526020018281526020019350505050602060405180830381600087803b15801561327657600080fd5b60045460009061302e90600019018361599f565b6004546000906134b69060001901848461472b565b6004546000906134b690600019018484613185565b6004546000906134b690600019018484613d6c565b6004546000906134b6906000190184846156b3565b600061497684615ebb565b604080517f116c47fe000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015285811660248301529151929091169163116c47fe916044808201926020929091908290030181600087803b15801561327657600080fd5b60048054600091829160001981019081106149fb57fe5b600091825260209091200154600454600160a060020a0390911692506000190190509091565b33600090815260016020526040812054600160a060020a03161515614a4557600080fd5b8351855114614a5357600080fd5b8251855114614a6157600080fd5b8151855114614a6f57600080fd5b60005b8551811015614be7576000600860008884815181101515614a8f57fe5b6020908102909101810151600160a060020a031682528101919091526040016000205490508015614abf57600080fd5b600160076080604051908101604052808a86815181101515614add57fe5b90602001906020020151600160a060020a031681526020018986815181101515614b0357fe5b9060200190602002015181526020018886815181101515614b2057fe5b9060200190602002015181526020018786815181101515614b3d57fe5b60209081029190910181015190915282546001808201855560009485528285208451600484029091018054600160a060020a031916600160a060020a039092169190911781559284015183820155604084015160028401556060909301516003909201919091558a519390030191600891908a9086908110614bbb57fe5b6020908102909101810151600160a060020a031682528101919091526040016000205550600101614a72565b50600195945050505050565b606080614bff83615ebb565b600160a060020a031663d2d3d7fb6040518163ffffffff1660e060020a02815260040160006040518083038186803b158015614c3a57600080fd5b505afa158015614c4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015614c7757600080fd5b810190808051602060020a811115614c8e57600080fd5b82016020810184811115614ca157600080fd5b81518560208202830111602060020a82111715614cbd57600080fd5b50509291906020018051602060020a811115614cd857600080fd5b82016020810184811115614ceb57600080fd5b81518560208202830111602060020a82111715614d0757600080fd5b50949650945050505050915091565b6000805b825181101561351357614d44848483815181101515614d3557fe5b90602001906020020151613034565b50600101614d1a565b6000805b825181101561351357614d7b848483815181101515614d6c57fe5b906020019060200201516153f1565b1515614d8657600080fd5b600101614d51565b600254600160a060020a031681565b6000614da884615ebb565b604080517f3c9d0f29000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152858116602483015291519290911691633c9d0f29916044808201926020929091908290030181600087803b15801561327657600080fd5b606080614e2284615ebb565b600160a060020a0316631391ff43846040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060006040518083038186803b15801561364157600080fd5b60008054600160a060020a03163314614e9257600080fd5b600160a060020a038281166000908152600160205260409020541615614eb757600080fd5b50600160a060020a031660008181526001602081905260409091208054600160a060020a03191690921790915590565b6004546000906134b690600019018484613afd565b60045460009061302e906000190183615009565b6004546000906134b690600019018484615ac4565b6000614f3083615ebb565b600160a060020a031663062ff957836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156135b757600080fd5b6004546000906134b690600019018484613ecb565b60045460009061353090600019016130cc565b6000805b83518110156133d857614ff6858583815181101515614fcf57fe5b906020019060200201518584815181101515614fe757fe5b9060200190602002015161496b565b151561500157600080fd5b600101614fb4565b600061501483615ebb565b600160a060020a031663753cb4eb836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156135b757600080fd5b6000615076615e91565b604080517f87549675000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152600160e060020a031986166024830152915192909116916387549675916044808201926020929091908290030181600087803b15801561309957600080fd5b600054600160a060020a031690565b33600090815260016020526040812054600160a060020a0316151561511f57600080fd5b5060028054600160a060020a038316600160a060020a03199091161790556001919050565b600054600160a060020a031681565b60045460009061302e906000190183613034565b6004546000906134b69060001901848461337f565b33600090815260016020526040812054600160a060020a031615156151a057600080fd5b5060038054600160a060020a038316600160a060020a03199091161790556001919050565b60045460009061302e90600019018361550c565b606080600660009054906101000a9004600160a060020a0316600160a060020a031663507bbc7e6040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561522d57600080fd5b505afa158015615241573d6000803e3d6000fd5b505050506040513d602081101561525757600080fd5b50511561528e5760408051600080825260208201909252905b5060408051600080825260208201909252905b509092509050613016565b606080600660009054906101000a9004600160a060020a0316600160a060020a0316630304363a6040518163ffffffff1660e060020a02815260040160006040518083038186803b1580156152e257600080fd5b505afa1580156152f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561531f57600080fd5b810190808051602060020a81111561533657600080fd5b8201602081018481111561534957600080fd5b81518560208202830111602060020a8211171561536557600080fd5b50509291906020018051602060020a81111561538057600080fd5b8201602081018481111561539357600080fd5b81518560208202830111602060020a821117156153af57600080fd5b505080519496509450505060019091101590506153e75750506040805160008082526020820190815281830190925292509050613016565b9092509050613016565b60006153fc83615ebb565b600160a060020a031663d1011185836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561309957600080fd5b33600090815260016020526040812054600160a060020a0316151561547a57600080fd5b600160a060020a03831660009081526005602052604090205480151561549f57600080fd5b826004828154811015156154af57fe5b60009182526020808320919091018054600160a060020a031916600160a060020a0394851617905595821681526005909552604080862086905593168452919092205550600190565b60608061301160016004805490500361371e565b600061551783615ebb565b600160a060020a03166395f11ce6836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561309957600080fd5b606080606061557e6159f4565b90925090506000805b83518110156155df57838181518110151561559e57fe5b90602001906020020151600160a060020a03163183828151811015156155c057fe5b9060200190602002015111156155d7576001909101905b600101615587565b5060608160405190808252806020026020018201604052801561560c578160200160208202803883390190505b5090506000805b85518110156156a857858181518110151561562a57fe5b90602001906020020151600160a060020a031631858281518110151561564c57fe5b9060200190602002015111156156a057858181518110151561566a57fe5b90602001906020020151838381518110151561568257fe5b600160a060020a039092166020928302909101909101526001909101905b600101615613565b509094505050505090565b60006156be84615ebb565b604080517fefa5d431000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a038681166024830152604482018690529151929091169163efa5d431916064808201926020929091908290030181600087803b15801561327657600080fd5b600654600160a060020a031681565b6000805b83518110156133d85761575685615ebb565b600160a060020a031663e94bc92633868481518110151561577357fe5b90602001906020020151868581518110151561578b57fe5b60209081029091018101516040805160e060020a63ffffffff8816028152600160a060020a03958616600482015293909416602484015260448301529151606480830193928290030181600087803b1580156157e657600080fd5b505af11580156157fa573d6000803e3d6000fd5b505050506040513d602081101561581057600080fd5b5051151561581d57600080fd5b600101615744565b606080600660009054906101000a9004600160a060020a0316600160a060020a031663507bbc7e6040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561587957600080fd5b505afa15801561588d573d6000803e3d6000fd5b505050506040513d60208110156158a357600080fd5b5051156158c0576040805160008082526020820190925290615270565b600654600160a060020a031660009081526005602052604090205460609081906158e98161371e565b815191945092506001111561528357505060408051600080825260208201908152818301909252935091506130169050565b60608061592783615ebb565b600160a060020a0316630304363a6040518163ffffffff1660e060020a02815260040160006040518083038186803b158015614c3a57600080fd5b6004546000906134b690600019018484615740565b60045460009061302e906000190183614d4d565b60045460009061302e9060001901836134d2565b6000805b8251811015613513576159cd8484838151811015156159be57fe5b9060200190602002015161550c565b15156159d857600080fd5b6001016159a3565b60045460009061302e9060001901836153f1565b606080613011600160048054905003614bf3565b60045460009061302e906000190183613554565b600160205260009081526040902054600160a060020a031681565b600080615a42615e91565b600160a060020a031663df815398846040518263ffffffff1660e060020a02815260040180828152602001915050604080518083038186803b158015615a8757600080fd5b505afa158015615a9b573d6000803e3d6000fd5b505050506040513d6040811015615ab157600080fd5b5080516020909101519092509050915091565b6000615acf84615ebb565b604080517f75a4ea52000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301528581166024830152915192909116916375a4ea52916044808201926020929091908290030181600087803b15801561327657600080fd5b6004546000906134b690600019018484613448565b33600090815260016020526040812054600160a060020a03161515615b7657600080fd5b600160a060020a038216600090815260086020526040902054801515615b9b57600080fd5b6007805482908110615ba957fe5b6000918252602082206004909102018054600160a060020a0319168155600181018290556002810182905560030155805b60075460001901811015615cab576007805460018301908110615bf957fe5b9060005260206000209060040201600782815481101515615c1657fe5b60009182526020822083546004909202018054600160a060020a031916600160a060020a039092169190911781556001808401549082015560028084015490820155600392830154920191909155600780548392600892909184908110615c7957fe5b60009182526020808320600490920290910154600160a060020a03168352820192909252604001902055600101615bda565b50600780546000198101908110615cbe57fe5b6000918252602082206004909102018054600160a060020a03191681556001810182905560028101829055600301556007805490615d00906000198301615f1c565b505050600160a060020a0316600090815260086020526040812055600190565b600080615d2c8361301a565b915050600160a060020a03821631915091565b60608061354b600160048054905003846135dd565b60008054600160a060020a03163314615d6c57600080fd5b60008054600160a060020a031916600160a060020a038416179055615d9082614e7a565b5060005461317c90600160a060020a0316613889565b6060806060806060615db66159f4565b815160408051828152602080840282010190915292945090925090606090828015615deb578160200160208202803883390190505b50905060005b82811015615e3b578481815181101515615e0757fe5b90602001906020020151600160a060020a0316318282815181101515615e2957fe5b60209081029091010152600101615df1565b509296919550919350915050565b6000615e5482615ebb565b600160a060020a03166311dd46b46040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561311457600080fd5b600354600090600160a060020a03161515615eab57600080fd5b50600354600160a060020a031690565b6000811515615ec957600080fd5b6004805483908110615ed757fe5b600091825260209091200154600160a060020a031692915050565b600254600090600160a060020a03161515615f0c57600080fd5b50600254600160a060020a031690565b815481835581811115615f4857600402816004028360005260206000209182019101615f489190615f4d565b505050565b61353391905b80821115615f86578054600160a060020a0319168155600060018201819055600282018190556003820155600401615f53565b509056fea165627a7a7230582052a1b8a09ec4107ffc912b9f7ee40fce6fed207c143a90505b75f6e3fd37d6220029";

    public static final String FUNC_CONTRACTSIMPLEPROXYADDRESS = "contractSimpleProxyAddress";

    public static final String FUNC_GETCONTRACTINDEXANDMETHODINDEX = "getContractIndexAndMethodIndex";

    public static final String FUNC_FETCHALLVOTERESULT = "fetchAllVoteResult";

    public static final String FUNC_FETCHVOTENUMFORVOTER = "fetchVoteNumForVoter";

    public static final String FUNC_REFRESHVOTEFORVOTERBYINDEX = "refreshVoteForVoterByIndex";

    public static final String FUNC_REFRESHVOTEFORALLBYINDEX = "refreshVoteForAllByIndex";

    public static final String FUNC_BATCHREFRESHVOTEFORVOTER = "batchRefreshVoteForVoter";

    public static final String FUNC_BATCHVOTEBYINDEX = "batchVoteByIndex";

    public static final String FUNC_FETCHALLCANDIDATESBYINDEX = "fetchAllCandidatesByIndex";

    public static final String FUNC_BATCHUPDATECANDIDATEADDRBYINDEX = "batchUpdateCandidateAddrByIndex";

    public static final String FUNC_ADDCANDIDATEBYINDEX = "addCandidateByIndex";

    public static final String FUNC_BATCHSETHOLDERADDRBYINDEX = "batchSetHolderAddrByIndex";

    public static final String FUNC_BATCHINITHOLDERADDR = "batchInitHolderAddr";

    public static final String FUNC_INITHOLDERADDR = "initHolderAddr";

    public static final String FUNC_BATCHADDCANDIDATEBYINDEX = "batchAddCandidateByIndex";

    public static final String FUNC_CALVOTERESULT = "calVoteResult";

    public static final String FUNC_FETCHVOTEINFOFORVOTER = "fetchVoteInfoForVoter";

    public static final String FUNC_GETHOLDERADDRBYINDEX = "getHolderAddrByIndex";

    public static final String FUNC_NODEBALLOTINDEX = "nodeBallotIndex";

    public static final String FUNC_FETCHVOTEINFOFORCANDIDATEBYINDEX = "fetchVoteInfoForCandidateByIndex";

    public static final String FUNC_FETCHALLHOLDERADDRSBYINDEX = "fetchAllHolderAddrsByIndex";

    public static final String FUNC_DELETEADMIN = "deleteAdmin";

    public static final String FUNC_GETALLHPBNODESCACHE = "getAllHpbNodesCache";

    public static final String FUNC_UPDATECOINBASEBYINDEX = "updateCoinBaseByIndex";

    public static final String FUNC_ADDHPBNODEBATCH = "addHpbNodeBatch";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_FETCHVOTENUMFORVOTERTOCANDIDATEBYINDEX = "fetchVoteNumForVoterToCandidateByIndex";

    public static final String FUNC_CLEARHPBNODECACHE = "clearHpbNodeCache";

    public static final String FUNC_ADDCANDIDATE = "addCandidate";

    public static final String FUNC_SETHOLDERADDR = "setHolderAddr";

    public static final String FUNC_FETCHALLCANDIDATES = "fetchAllCandidates";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_BATCHUPDATECOINBASEBYINDEX = "batchUpdateCoinBaseByIndex";

    public static final String FUNC_SWITCHNODES = "switchNodes";

    public static final String FUNC_GETTOREFRESHRESULTBYINDEX = "getToRefreshResultByIndex";

    public static final String FUNC_NODEBALLOTADDRS = "nodeBallotAddrs";

    public static final String FUNC_ADDNODEBALLOTADDRESS = "addNodeBallotAddress";

    public static final String FUNC_CANCELVOTEFORCANDIDATEBYINDEX = "cancelVoteForCandidateByIndex";

    public static final String FUNC_FETCHVOTENUMFORVOTERWITHBALANCE = "fetchVoteNumForVoterWithBalance";

    public static final String FUNC_UPDATEINVOKECONTRACT = "updateInvokeContract";

    public static final String FUNC_BATCHDELETECANDIDATE = "batchDeleteCandidate";

    public static final String FUNC_CANCELVOTEFORCANDIDATE = "cancelVoteForCandidate";

    public static final String FUNC_BATCHVOTE = "batchVote";

    public static final String FUNC_FETCHVOTENUMFORVOTERTOCANDIDATE = "fetchVoteNumForVoterToCandidate";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_INITHOLDERADDRBYINDEX = "initHolderAddrByIndex";

    public static final String FUNC_GETLASTESTBALLOTADDRANDINDEX = "getLastestBallotAddrAndIndex";

    public static final String FUNC_ADDNODESCACHE = "addNodesCache";

    public static final String FUNC_FETCHALLVOTERSBYINDEX = "fetchAllVotersByIndex";

    public static final String FUNC_BATCHREFRESHVOTEFORVOTERBYINDEX = "batchRefreshVoteForVoterByIndex";

    public static final String FUNC_BATCHADDCOINBASEBYINDEX = "batchAddCoinBaseByIndex";

    public static final String FUNC_HPBNODESADDRESS = "hpbNodesAddress";

    public static final String FUNC_SETHOLDERADDRBYINDEX = "setHolderAddrByIndex";

    public static final String FUNC_FETCHVOTEINFOFORVOTERBYINDEX = "fetchVoteInfoForVoterByIndex";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_UPDATECOINBASE = "updateCoinBase";

    public static final String FUNC_FETCHVOTENUMFORCANDIDATE = "fetchVoteNumForCandidate";

    public static final String FUNC_UPDATECANDIDATEADDR = "updateCandidateAddr";

    public static final String FUNC_FETCHVOTENUMFORVOTERBYINDEX = "fetchVoteNumForVoterByIndex";

    public static final String FUNC_BATCHUPDATECOINBASE = "batchUpdateCoinBase";

    public static final String FUNC_REFRESHVOTEFORALL = "refreshVoteForAll";

    public static final String FUNC_BATCHINITHOLDERADDRBYINDEX = "batchInitHolderAddrByIndex";

    public static final String FUNC_FETCHVOTENUMFORCANDIDATEBYINDEX = "fetchVoteNumForCandidateByIndex";

    public static final String FUNC_ADDCONTRACTMETHOD = "addContractMethod";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_SETHPBNODESADDRESS = "setHpbNodesAddress";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REFRESHVOTEFORVOTER = "refreshVoteForVoter";

    public static final String FUNC_BATCHUPDATECANDIDATEADDR = "batchUpdateCandidateAddr";

    public static final String FUNC_SETCONTRACTSIMPLEPROXYADDRESS = "setContractSimpleProxyAddress";

    public static final String FUNC_DELETECANDIDATE = "deleteCandidate";

    public static final String FUNC_FETCHRESULTFORNODES = "fetchResultForNodes";

    public static final String FUNC_ADDCOINBASEBYINDEX = "addCoinBaseByIndex";

    public static final String FUNC_UPDATENODEBALLOTADDRESS = "updateNodeBallotAddress";

    public static final String FUNC_FETCHALLHOLDERADDRS = "fetchAllHolderAddrs";

    public static final String FUNC_DELETECANDIDATEBYINDEX = "deleteCandidateByIndex";

    public static final String FUNC_GETTOREFRESHRESULT = "getToRefreshResult";

    public static final String FUNC_VOTEBYINDEX = "voteByIndex";

    public static final String FUNC_NODEBALLOTADDRINSERVICE = "nodeBallotAddrInService";

    public static final String FUNC_BATCHCANCELVOTEFORCANDIDATEBYINDEX = "batchCancelVoteForCandidateByIndex";

    public static final String FUNC_FETCHALLHOLDERADDRSFORNODES = "fetchAllHolderAddrsForNodes";

    public static final String FUNC_FETCHALLVOTERESULTBYINDEX = "fetchAllVoteResultByIndex";

    public static final String FUNC_BATCHCANCELVOTEFORCANDIDATE = "batchCancelVoteForCandidate";

    public static final String FUNC_BATCHADDCOINBASE = "batchAddCoinBase";

    public static final String FUNC_BATCHADDCANDIDATE = "batchAddCandidate";

    public static final String FUNC_BATCHDELETECANDIDATEBYINDEX = "batchDeleteCandidateByIndex";

    public static final String FUNC_ADDCOINBASE = "addCoinBase";

    public static final String FUNC_FETCHALLVOTERS = "fetchAllVoters";

    public static final String FUNC_GETHOLDERADDR = "getHolderAddr";

    public static final String FUNC_ADMINMAP = "adminMap";

    public static final String FUNC_GETINVOKECONTRACT = "getInvokeContract";

    public static final String FUNC_UPDATECANDIDATEADDRBYINDEX = "updateCandidateAddrByIndex";

    public static final String FUNC_BATCHSETHOLDERADDR = "batchSetHolderAddr";

    public static final String FUNC_DELETEHPBNODECACHE = "deleteHpbNodeCache";

    public static final String FUNC_FETCHVOTEINFOFORCANDIDATE = "fetchVoteInfoForCandidate";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_FETCHALLVOTERWITHBALANCE = "fetchAllVoterWithBalance";

    public static final String FUNC_CALVOTERESULTBYINDEX = "calVoteResultByIndex";

    public static final Event RECEIVEDHPB_EVENT = new Event("ReceivedHpb",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected HpbContractProxy(String contractAddress, Web3 web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

  /*  protected HpbContractProxy(String contractAddress, Web3 web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }*/

    @Deprecated
    protected HpbContractProxy(String contractAddress, Web3 web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected HpbContractProxy(String contractAddress, Web3 web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> contractSimpleProxyAddress() {
        final Function function = new Function(FUNC_CONTRACTSIMPLEPROXYADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> getContractIndexAndMethodIndex(String _contractAddr, byte[] _methodId) {
        final Function function = new Function(FUNC_GETCONTRACTINDEXANDMETHODINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_contractAddr),
                new io.hpb.web3.abi.datatypes.generated.Bytes4(_methodId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchAllVoteResult() {
        final Function function = new Function(FUNC_FETCHALLVOTERESULT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<BigInteger> fetchVoteNumForVoter(String voterAddr) {
        final Function function = new Function(FUNC_FETCHVOTENUMFORVOTER,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> refreshVoteForVoterByIndex(BigInteger index, String voterAddr) {
        final Function function = new Function(
                FUNC_REFRESHVOTEFORVOTERBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(voterAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> refreshVoteForAllByIndex(BigInteger index) {
        final Function function = new Function(
                FUNC_REFRESHVOTEFORALLBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchRefreshVoteForVoter(List<String> voterAddrs) {
        final Function function = new Function(
                FUNC_BATCHREFRESHVOTEFORVOTER,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(voterAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchVoteByIndex(BigInteger index, List<String> candidateAddrs, List<BigInteger> nums) {
        final Function function = new Function(
                FUNC_BATCHVOTEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(candidateAddrs, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint256>(
                        io.hpb.web3.abi.Utils.typeMap(nums, io.hpb.web3.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> fetchAllCandidatesByIndex(BigInteger index) {
        final Function function = new Function(FUNC_FETCHALLCANDIDATESBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> batchUpdateCandidateAddrByIndex(BigInteger index, List<String> _candidateAddrs, List<String> _newCandidateAddrs) {
        final Function function = new Function(
                FUNC_BATCHUPDATECANDIDATEADDRBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_candidateAddrs, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_newCandidateAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addCandidateByIndex(BigInteger index, String _candidateAddr) {
        final Function function = new Function(
                FUNC_ADDCANDIDATEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(_candidateAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchSetHolderAddrByIndex(BigInteger index, List<String> _coinBases, List<String> _holderAddrs) {
        final Function function = new Function(
                FUNC_BATCHSETHOLDERADDRBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_coinBases, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_holderAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchInitHolderAddr(List<String> _coinBases, List<String> _holderAddrs) {
        final Function function = new Function(
                FUNC_BATCHINITHOLDERADDR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_coinBases, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_holderAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> initHolderAddr(String _coinBase, String _holderAddr) {
        final Function function = new Function(
                FUNC_INITHOLDERADDR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_coinBase),
                new io.hpb.web3.abi.datatypes.Address(_holderAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchAddCandidateByIndex(BigInteger index, List<String> _candidateAddrs) {
        final Function function = new Function(
                FUNC_BATCHADDCANDIDATEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_candidateAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> calVoteResult() {
        final Function function = new Function(
                FUNC_CALVOTERESULT,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchVoteInfoForVoter(String voterAddr) {
        final Function function = new Function(FUNC_FETCHVOTEINFOFORVOTER,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<String> getHolderAddrByIndex(BigInteger index, String _coinBase) {
        final Function function = new Function(FUNC_GETHOLDERADDRBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(_coinBase)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> nodeBallotIndex(String param0) {
        final Function function = new Function(FUNC_NODEBALLOTINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchVoteInfoForCandidateByIndex(BigInteger index, String candidateAddr) {
        final Function function = new Function(FUNC_FETCHVOTEINFOFORCANDIDATEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(candidateAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple2<List<String>, List<String>>> fetchAllHolderAddrsByIndex(BigInteger index) {
        final Function function = new Function(FUNC_FETCHALLHOLDERADDRSBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<String>>>(
                new Callable<Tuple2<List<String>, List<String>>>() {
                    @Override
                    public Tuple2<List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<String>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Address>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deleteAdmin(String addr) {
        final Function function = new Function(
                FUNC_DELETEADMIN,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<List<String>, List<byte[]>, List<byte[]>, List<byte[]>>> getAllHpbNodesCache() {
        final Function function = new Function(FUNC_GETALLHPBNODESCACHE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple4<List<String>, List<byte[]>, List<byte[]>, List<byte[]>>>(
                new Callable<Tuple4<List<String>, List<byte[]>, List<byte[]>, List<byte[]>>>() {
                    @Override
                    public Tuple4<List<String>, List<byte[]>, List<byte[]>, List<byte[]>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<List<String>, List<byte[]>, List<byte[]>, List<byte[]>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Bytes32>) results.get(1).getValue()),
                                convertToNative((List<Bytes32>) results.get(2).getValue()),
                                convertToNative((List<Bytes32>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> updateCoinBaseByIndex(BigInteger index, String _coinBase, String _newCoinBase) {
        final Function function = new Function(
                FUNC_UPDATECOINBASEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(_coinBase),
                new io.hpb.web3.abi.datatypes.Address(_newCoinBase)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addHpbNodeBatch(List<String> coinbases, List<byte[]> cid1s, List<byte[]> cid2s, List<byte[]> hids) {
        final Function function = new Function(
                FUNC_ADDHPBNODEBATCH,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(coinbases, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Bytes32>(
                        io.hpb.web3.abi.Utils.typeMap(cid1s, io.hpb.web3.abi.datatypes.generated.Bytes32.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Bytes32>(
                        io.hpb.web3.abi.Utils.typeMap(cid2s, io.hpb.web3.abi.datatypes.generated.Bytes32.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Bytes32>(
                        io.hpb.web3.abi.Utils.typeMap(hids, io.hpb.web3.abi.datatypes.generated.Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdraw(BigInteger _value, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> fetchVoteNumForVoterToCandidateByIndex(BigInteger index, String voterAddr, String candidateAddr) {
        final Function function = new Function(FUNC_FETCHVOTENUMFORVOTERTOCANDIDATEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(voterAddr),
                new io.hpb.web3.abi.datatypes.Address(candidateAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> clearHpbNodeCache(List<String> _coinbases) {
        final Function function = new Function(
                FUNC_CLEARHPBNODECACHE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_coinbases, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addCandidate(String _candidateAddr) {
        final Function function = new Function(
                FUNC_ADDCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_candidateAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setHolderAddr(String _coinBase, String _holderAddr) {
        final Function function = new Function(
                FUNC_SETHOLDERADDR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_coinBase),
                new io.hpb.web3.abi.datatypes.Address(_holderAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> fetchAllCandidates() {
        final Function function = new Function(FUNC_FETCHALLCANDIDATES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> kill(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_KILL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> batchUpdateCoinBaseByIndex(BigInteger index, List<String> _coinBases, List<String> _newCoinBases) {
        final Function function = new Function(
                FUNC_BATCHUPDATECOINBASEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_coinBases, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_newCoinBases, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> switchNodes(byte[] _methodId2, byte[] _methodId3) {
        final Function function = new Function(
                FUNC_SWITCHNODES,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Bytes4(_methodId2),
                new io.hpb.web3.abi.datatypes.generated.Bytes4(_methodId3)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getToRefreshResultByIndex(BigInteger index) {
        final Function function = new Function(FUNC_GETTOREFRESHRESULTBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<String> nodeBallotAddrs(BigInteger param0) {
        final Function function = new Function(FUNC_NODEBALLOTADDRS,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addNodeBallotAddress(String _nodeBallotAddress) {
        final Function function = new Function(
                FUNC_ADDNODEBALLOTADDRESS,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_nodeBallotAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> cancelVoteForCandidateByIndex(BigInteger index, String candidateAddr, BigInteger num) {
        final Function function = new Function(
                FUNC_CANCELVOTEFORCANDIDATEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(candidateAddr),
                new io.hpb.web3.abi.datatypes.generated.Uint256(num)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<BigInteger>, List<BigInteger>>> fetchVoteNumForVoterWithBalance(List<String> voterAddrs) {
        final Function function = new Function(FUNC_FETCHVOTENUMFORVOTERWITHBALANCE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(voterAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple2<List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> updateInvokeContract(BigInteger invokeIndex, BigInteger contractIndex, BigInteger methodIdIndex) {
        final Function function = new Function(
                FUNC_UPDATEINVOKECONTRACT,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(invokeIndex),
                new io.hpb.web3.abi.datatypes.generated.Uint256(contractIndex),
                new io.hpb.web3.abi.datatypes.generated.Uint256(methodIdIndex)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchDeleteCandidate(List<String> _candidateAddrs) {
        final Function function = new Function(
                FUNC_BATCHDELETECANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_candidateAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> cancelVoteForCandidate(String candidateAddr, BigInteger num) {
        final Function function = new Function(
                FUNC_CANCELVOTEFORCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(candidateAddr),
                new io.hpb.web3.abi.datatypes.generated.Uint256(num)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchVote(List<String> candidateAddrs, List<BigInteger> nums) {
        final Function function = new Function(
                FUNC_BATCHVOTE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(candidateAddrs, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint256>(
                        io.hpb.web3.abi.Utils.typeMap(nums, io.hpb.web3.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> fetchVoteNumForVoterToCandidate(String voterAddr, String candidateAddr) {
        final Function function = new Function(FUNC_FETCHVOTENUMFORVOTERTOCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr),
                new io.hpb.web3.abi.datatypes.Address(candidateAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> vote(String candidateAddr, BigInteger num) {
        final Function function = new Function(
                FUNC_VOTE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(candidateAddr),
                new io.hpb.web3.abi.datatypes.generated.Uint256(num)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> initHolderAddrByIndex(BigInteger index, String _coinBase, String _holderAddr) {
        final Function function = new Function(
                FUNC_INITHOLDERADDRBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(_coinBase),
                new io.hpb.web3.abi.datatypes.Address(_holderAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<String, BigInteger>> getLastestBallotAddrAndIndex() {
        final Function function = new Function(FUNC_GETLASTESTBALLOTADDRANDINDEX,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addNodesCache(List<String> coinbases, List<byte[]> cid1s, List<byte[]> cid2s, List<byte[]> hids) {
        final Function function = new Function(
                FUNC_ADDNODESCACHE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(coinbases, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Bytes32>(
                        io.hpb.web3.abi.Utils.typeMap(cid1s, io.hpb.web3.abi.datatypes.generated.Bytes32.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Bytes32>(
                        io.hpb.web3.abi.Utils.typeMap(cid2s, io.hpb.web3.abi.datatypes.generated.Bytes32.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Bytes32>(
                        io.hpb.web3.abi.Utils.typeMap(hids, io.hpb.web3.abi.datatypes.generated.Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchAllVotersByIndex(BigInteger index) {
        final Function function = new Function(FUNC_FETCHALLVOTERSBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> batchRefreshVoteForVoterByIndex(BigInteger index, List<String> voterAddrs) {
        final Function function = new Function(
                FUNC_BATCHREFRESHVOTEFORVOTERBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(voterAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchAddCoinBaseByIndex(BigInteger index, List<String> _coinBases) {
        final Function function = new Function(
                FUNC_BATCHADDCOINBASEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_coinBases, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> hpbNodesAddress() {
        final Function function = new Function(FUNC_HPBNODESADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setHolderAddrByIndex(BigInteger index, String _coinBase, String _holderAddr) {
        final Function function = new Function(
                FUNC_SETHOLDERADDRBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(_coinBase),
                new io.hpb.web3.abi.datatypes.Address(_holderAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchVoteInfoForVoterByIndex(BigInteger index, String voterAddr) {
        final Function function = new Function(FUNC_FETCHVOTEINFOFORVOTERBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(voterAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addAdmin(String addr) {
        final Function function = new Function(
                FUNC_ADDADMIN,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateCoinBase(String _coinBase, String _newCoinBase) {
        final Function function = new Function(
                FUNC_UPDATECOINBASE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_coinBase),
                new io.hpb.web3.abi.datatypes.Address(_newCoinBase)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> fetchVoteNumForCandidate(String candidateAddr) {
        final Function function = new Function(FUNC_FETCHVOTENUMFORCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(candidateAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> updateCandidateAddr(String _candidateAddr, String _newCandidateAddr) {
        final Function function = new Function(
                FUNC_UPDATECANDIDATEADDR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_candidateAddr),
                new io.hpb.web3.abi.datatypes.Address(_newCandidateAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> fetchVoteNumForVoterByIndex(BigInteger index, String voterAddr) {
        final Function function = new Function(FUNC_FETCHVOTENUMFORVOTERBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(voterAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> batchUpdateCoinBase(List<String> _coinBases, List<String> _newCoinBases) {
        final Function function = new Function(
                FUNC_BATCHUPDATECOINBASE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_coinBases, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_newCoinBases, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> refreshVoteForAll() {
        final Function function = new Function(
                FUNC_REFRESHVOTEFORALL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchInitHolderAddrByIndex(BigInteger index, List<String> _coinBases, List<String> _holderAddrs) {
        final Function function = new Function(
                FUNC_BATCHINITHOLDERADDRBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_coinBases, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_holderAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> fetchVoteNumForCandidateByIndex(BigInteger index, String candidateAddr) {
        final Function function = new Function(FUNC_FETCHVOTENUMFORCANDIDATEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(candidateAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addContractMethod(String _contractAddr, byte[] _methodId) {
        final Function function = new Function(
                FUNC_ADDCONTRACTMETHOD,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_contractAddr),
                new io.hpb.web3.abi.datatypes.generated.Bytes4(_methodId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getOwner() {
        final Function function = new Function(FUNC_GETOWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setHpbNodesAddress(String _hpbNodesAddress) {
        final Function function = new Function(
                FUNC_SETHPBNODESADDRESS,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_hpbNodesAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> refreshVoteForVoter(String voterAddr) {
        final Function function = new Function(
                FUNC_REFRESHVOTEFORVOTER,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchUpdateCandidateAddr(List<String> _candidateAddrs, List<String> _newCandidateAddrs) {
        final Function function = new Function(
                FUNC_BATCHUPDATECANDIDATEADDR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_candidateAddrs, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_newCandidateAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setContractSimpleProxyAddress(String _contractSimpleProxyAddress) {
        final Function function = new Function(
                FUNC_SETCONTRACTSIMPLEPROXYADDRESS,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_contractSimpleProxyAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteCandidate(String _candidateAddr) {
        final Function function = new Function(
                FUNC_DELETECANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_candidateAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchResultForNodes() {
        final Function function = new Function(FUNC_FETCHRESULTFORNODES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addCoinBaseByIndex(BigInteger index, String _coinBase) {
        final Function function = new Function(
                FUNC_ADDCOINBASEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(_coinBase)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateNodeBallotAddress(String _nodeBallotAddress, String _newNodeBallotAddress) {
        final Function function = new Function(
                FUNC_UPDATENODEBALLOTADDRESS,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_nodeBallotAddress),
                new io.hpb.web3.abi.datatypes.Address(_newNodeBallotAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<String>, List<String>>> fetchAllHolderAddrs() {
        final Function function = new Function(FUNC_FETCHALLHOLDERADDRS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<String>>>(
                new Callable<Tuple2<List<String>, List<String>>>() {
                    @Override
                    public Tuple2<List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<String>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Address>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deleteCandidateByIndex(BigInteger index, String _candidateAddr) {
        final Function function = new Function(
                FUNC_DELETECANDIDATEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(_candidateAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getToRefreshResult() {
        final Function function = new Function(FUNC_GETTOREFRESHRESULT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> voteByIndex(BigInteger index, String candidateAddr, BigInteger num) {
        final Function function = new Function(
                FUNC_VOTEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(candidateAddr),
                new io.hpb.web3.abi.datatypes.generated.Uint256(num)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> nodeBallotAddrInService() {
        final Function function = new Function(FUNC_NODEBALLOTADDRINSERVICE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> batchCancelVoteForCandidateByIndex(BigInteger index, List<String> candidateAddrs, List<BigInteger> nums) {
        final Function function = new Function(
                FUNC_BATCHCANCELVOTEFORCANDIDATEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(candidateAddrs, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint256>(
                        io.hpb.web3.abi.Utils.typeMap(nums, io.hpb.web3.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<String>, List<String>>> fetchAllHolderAddrsForNodes() {
        final Function function = new Function(FUNC_FETCHALLHOLDERADDRSFORNODES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<String>>>(
                new Callable<Tuple2<List<String>, List<String>>>() {
                    @Override
                    public Tuple2<List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<String>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Address>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchAllVoteResultByIndex(BigInteger index) {
        final Function function = new Function(FUNC_FETCHALLVOTERESULTBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> batchCancelVoteForCandidate(List<String> candidateAddrs, List<BigInteger> nums) {
        final Function function = new Function(
                FUNC_BATCHCANCELVOTEFORCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(candidateAddrs, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint256>(
                        io.hpb.web3.abi.Utils.typeMap(nums, io.hpb.web3.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchAddCoinBase(List<String> _coinBases) {
        final Function function = new Function(
                FUNC_BATCHADDCOINBASE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_coinBases, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchAddCandidate(List<String> _candidateAddrs) {
        final Function function = new Function(
                FUNC_BATCHADDCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_candidateAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchDeleteCandidateByIndex(BigInteger index, List<String> _candidateAddrs) {
        final Function function = new Function(
                FUNC_BATCHDELETECANDIDATEBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_candidateAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addCoinBase(String _coinBase) {
        final Function function = new Function(
                FUNC_ADDCOINBASE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_coinBase)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchAllVoters() {
        final Function function = new Function(FUNC_FETCHALLVOTERS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<String> getHolderAddr(String _coinBase) {
        final Function function = new Function(FUNC_GETHOLDERADDR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_coinBase)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> adminMap(String param0) {
        final Function function = new Function(FUNC_ADMINMAP,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<String, byte[]>> getInvokeContract(BigInteger invokeIndex) {
        final Function function = new Function(FUNC_GETINVOKECONTRACT,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(invokeIndex)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes4>() {}));
        return new RemoteCall<Tuple2<String, byte[]>>(
                new Callable<Tuple2<String, byte[]>>() {
                    @Override
                    public Tuple2<String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, byte[]>(
                                (String) results.get(0).getValue(),
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> updateCandidateAddrByIndex(BigInteger index, String _candidateAddr, String _newCandidateAddr) {
        final Function function = new Function(
                FUNC_UPDATECANDIDATEADDRBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(_candidateAddr),
                new io.hpb.web3.abi.datatypes.Address(_newCandidateAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchSetHolderAddr(List<String> _coinBases, List<String> _holderAddrs) {
        final Function function = new Function(
                FUNC_BATCHSETHOLDERADDR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_coinBases, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.Utils.typeMap(_holderAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteHpbNodeCache(String coinbase) {
        final Function function = new Function(
                FUNC_DELETEHPBNODECACHE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(coinbase)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> fetchVoteNumForVoterWithBalance(String voterAddr) {
        final Function function = new Function(FUNC_FETCHVOTENUMFORVOTERWITHBALANCE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchVoteInfoForCandidate(String candidateAddr) {
        final Function function = new Function(FUNC_FETCHVOTEINFOFORCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(candidateAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>> fetchAllVoterWithBalance() {
        final Function function = new Function(FUNC_FETCHALLVOTERWITHBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple3<List<String>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<String>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()),
                                convertToNative((List<Uint256>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> calVoteResultByIndex(BigInteger index) {
        final Function function = new Function(
                FUNC_CALVOTERESULTBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

 /*   public static RemoteCall<HpbContractProxy> deploy(Web3 web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger initialWeiValue) {
        return deployRemoteCall(HpbContractProxy.class, web3j, credentials, contractGasProvider, BINARY, "", initialWeiValue);
    }

    public static RemoteCall<HpbContractProxy> deploy(Web3 web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger initialWeiValue) {
        return deployRemoteCall(HpbContractProxy.class, web3j, transactionManager, contractGasProvider, BINARY, "", initialWeiValue);
    }*/

    @Deprecated
    public static RemoteCall<HpbContractProxy> deploy(Web3 web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(HpbContractProxy.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    @Deprecated
    public static RemoteCall<HpbContractProxy> deploy(Web3 web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(HpbContractProxy.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public List<ReceivedHpbEventResponse> getReceivedHpbEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RECEIVEDHPB_EVENT, transactionReceipt);
        ArrayList<ReceivedHpbEventResponse> responses = new ArrayList<ReceivedHpbEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReceivedHpbEventResponse typedResponse = new ReceivedHpbEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

 /*   public Observable<ReceivedHpbEventResponse> receivedHpbEventObservable(HpbFilter filter) {
        return web3j.hpbLogObservable(filter).map(new Func1<Log, ReceivedHpbEventResponse>() {
            @Override
            public ReceivedHpbEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECEIVEDHPB_EVENT, log);
                ReceivedHpbEventResponse typedResponse = new ReceivedHpbEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }*/

/*    public Observable<ReceivedHpbEventResponse> receivedHpbEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECEIVEDHPB_EVENT));
        return receivedHpbEventObservable(filter);
    }*/

    @Deprecated
    public static HpbContractProxy load(String contractAddress, Web3 web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new HpbContractProxy(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static HpbContractProxy load(String contractAddress, Web3 web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new HpbContractProxy(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

/*    public static HpbContractProxy load(String contractAddress, Web3 web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new HpbContractProxy(contractAddress, web3j, credentials, contractGasProvider);
    }*/

    public static HpbContractProxy load(String contractAddress, Web3 web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new HpbContractProxy(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class ReceivedHpbEventResponse {
        public Log log;

        public String sender;

        public BigInteger amount;
    }
}
