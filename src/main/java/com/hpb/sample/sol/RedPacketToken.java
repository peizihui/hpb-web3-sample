package com.hpb.sample.sol;

import io.hpb.web3.abi.EventEncoder;
import io.hpb.web3.abi.TypeReference;
import io.hpb.web3.abi.datatypes.*;
import io.hpb.web3.abi.datatypes.generated.Bytes32;
import io.hpb.web3.abi.datatypes.generated.Bytes4;
import io.hpb.web3.abi.datatypes.generated.Uint256;
import io.hpb.web3.crypto.Credentials;
import io.hpb.web3.protocol.Web3;
import io.hpb.web3.protocol.core.DefaultBlockParameter;
import io.hpb.web3.protocol.core.RemoteCall;
import io.hpb.web3.protocol.core.methods.request.HpbFilter;
import io.hpb.web3.protocol.core.methods.response.Log;
import io.hpb.web3.protocol.core.methods.response.TransactionReceipt;
import io.hpb.web3.tuples.generated.Tuple3;
import io.hpb.web3.tx.Contract;
import io.hpb.web3.tx.TransactionManager;
import io.hpb.web3.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Generated with web3 version none.
 */
@SuppressWarnings("rawtypes")
public class RedPacketToken extends Contract {
    private static final String BINARY = "60a0604052600060809081526200001b90600e9060016200034f565b50655af3107a4000601055661ff973cafa8000601155604080518082018252600e81527f5265645061636b6574546f6b656e0000000000000000000000000000000000006020808301919091528251808401909352600383527f525054000000000000000000000000000000000000000000000000000000000090830152908181620000d07f01ffc9a700000000000000000000000000000000000000000000000000000000640100000000620002e2810204565b620001047f80ac58cd00000000000000000000000000000000000000000000000000000000640100000000620002e2810204565b620001387f780e9d6300000000000000000000000000000000000000000000000000000000640100000000620002e2810204565b81516200014d906009906020850190620003a4565b5080516200016390600a906020840190620003a4565b50620001987f5b5e139f00000000000000000000000000000000000000000000000000000000640100000000620002e2810204565b5050600c8054600160a060020a03191633179055505060408051608081018252600080825282518084018452600b81527fe9a696e4b8aa746f6b656e000000000000000000000000000000000000000000602082810191909152808401918252845180820186528381529484019490945260608301829052601280546001810180835591909352835160049093027fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444810193845591518051919562000283937fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34450192910190620003a4565b5060408201518051620002a1916002840191602090910190620003a4565b506060919091015160039091015550600080805260136020527f8fa6efc3be94b5b348b21fea823fe8d100408cee9b7f90524494500445d8ff6c5562000437565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200031257600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b82805482825590600052602060002090810192821562000392579160200282015b8281111562000392578251829060ff1690559160200191906001019062000370565b50620003a092915062000417565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003e757805160ff191683800117855562000392565b8280016001018555821562000392579182015b8281111562000392578251825591602001919060010190620003fa565b6200043491905b80821115620003a057600081556001016200041e565b90565b612acc80620004476000396000f3006080604052600436106101d75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461020f57806305d27d7c1461025a57806306fdde0314610286578063081812fc14610310578063095ea7b3146103445780630c1901ad1461036857806313af40351461041157806318160ddd146104325780631fd8088d1461045957806323b872dd1461046e57806328f7e69f146104985780632f745c591461053a57806336e95fca1461055e5780633e38a2b7146105765780633f45e8001461058b57806342842e0e1461068857806343c561aa146106b25780634f6ccce71461074c5780635faa1551146107645780636352211e1461077c57806368bb6f04146107945780636c336014146108915780636d425249146108bd5780636ec6d4a6146108d257806370a08231146108ea5780637b6750bf1461090b578063893d20e8146109235780638da5cb5b1461093857806395d89b411461094d578063a22cb46514610962578063a57b31b814610988578063b1548afc1461099f578063b88d4fde146109b7578063c70540a814610a26578063c87b56dd14610a3e578063dcc66cc214610a56578063e71bdf4114610a6e578063e985e9c514610a8f575b60408051348152905133917f7129701436f0cdc265d1e2cda298e8a1ccd6ed5fce7f69343e16530b07a2e06e919081900360200190a2005b34801561021b57600080fd5b506102467bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610ab6565b604080519115158252519081900360200190f35b34801561026657600080fd5b50610284600160a060020a0360043581169060243516604435610aea565b005b34801561029257600080fd5b5061029b610b04565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102d55781810151838201526020016102bd565b50505050905090810190601f1680156103025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561031c57600080fd5b50610328600435610b9b565b60408051600160a060020a039092168252519081900360200190f35b34801561035057600080fd5b50610284600160a060020a0360043516602435610bcd565b604080516020600460443581810135601f8101849004840285018401909552848452610246948235600160a060020a039081169560248035909216953695946064949293019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750508435955050506020909201359150610cd99050565b34801561041d57600080fd5b50610284600160a060020a0360043516611124565b34801561043e57600080fd5b5061044761116a565b60408051918252519081900360200190f35b34801561046557600080fd5b50610447611170565b34801561047a57600080fd5b50610284600160a060020a0360043581169060243516604435611176565b604080516020600460443581810135601f8101849004840285018401909552848452610246948235600160a060020a039081169560248035909216953695946064949293019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975050933594506113a89350505050565b34801561054657600080fd5b50610447600160a060020a03600435166024356113c3565b34801561056a57600080fd5b50610447600435611410565b34801561058257600080fd5b50610447611422565b604080516020600480358082013583810280860185019096528085526102469536959394602494938501929182918501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506114289650505050505050565b34801561069457600080fd5b50610284600160a060020a03600435811690602435166044356114cf565b60408051602060046024803582810135601f8101859004850286018501909652858552610246958335600160a060020a031695369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975050933594506115ea9350505050565b34801561075857600080fd5b50610447600435611610565b34801561077057600080fd5b50610246600435611645565b34801561078857600080fd5b5061032860043561167a565b3480156107a057600080fd5b506107ac6004356116a4565b604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156107f35781810151838201526020016107db565b50505050905090810190601f1680156108205780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561085357818101518382015260200161083b565b50505050905090810190601f1680156108805780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561089d57600080fd5b50610284600160a060020a036004358116906024351660443515156118d0565b3480156108c957600080fd5b50610447611957565b3480156108de57600080fd5b5061024660043561195d565b3480156108f657600080fd5b50610447600160a060020a0360043516611980565b34801561091757600080fd5b506103286004356119b3565b34801561092f57600080fd5b50610328611a47565b34801561094457600080fd5b50610328611a56565b34801561095957600080fd5b5061029b611a65565b34801561096e57600080fd5b50610284600160a060020a03600435166024351515611ac6565b610284600160a060020a0360043516602435611b4a565b3480156109ab57600080fd5b50610328600435611e64565b3480156109c357600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261028494600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750611e7f9650505050505050565b348015610a3257600080fd5b50610447600435612003565b348015610a4a57600080fd5b5061029b600435612022565b348015610a6257600080fd5b506103286004356120d7565b348015610a7a57600080fd5b50610284600160a060020a0360043516612146565b348015610a9b57600080fd5b50610246600160a060020a0360043581169060243516612262565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b610af5838383611176565b610aff8282611b4a565b505050565b60098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b905780601f10610b6557610100808354040283529160200191610b90565b820191906000526020600020905b815481529060010190602001808311610b7357829003601f168201915b505050505090505b90565b6000610ba682612290565b1515610bb157600080fd5b50600090815260026020526040902054600160a060020a031690565b6000610bd8826119b3565b604080517fe1f21c67000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0386811660248301526044820186905291519293509083169163e1f21c67916064808201926020929091908290030181600087803b158015610c4d57600080fd5b505af1158015610c61573d6000803e3d6000fd5b505050506040513d6020811015610c7757600080fd5b50511515610ccf576040805160e560020a62461bcd02815260206004820152601760248201527f636f756c64206e6f7420617070726f766520746f6b656e000000000000000000604482015290519081900360640190fd5b610aff83836122ad565b6000806000806010548610151515610cf057600080fd5b600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd81018690559250610d31856120d7565b604080517fc6c3bbe6000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a038c811660248301526044820187905291519294509084169163c6c3bbe6916064808201926020929091908290030181600087803b158015610da657600080fd5b505af1158015610dba573d6000803e3d6000fd5b505050506040513d6020811015610dd057600080fd5b50511515610e28576040805160e560020a62461bcd02815260206004820152601d60248201527f64656c656761746520636f756c64206e6f74206d696e7420746f6b656e000000604482015290519081900360640190fd5b50601280546040805160808101825285815260208082018c81529282018b9052606082018a9052600184018086556000959095528151600485027fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344481019182559351805195969593949193610ec6937fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34459093019291909101906129c8565b5060408201518051610ee29160028401916020909101906129c8565b5060608201518160030155505050806013600085815260200190815260200160002081905550876040518082805190602001908083835b60208310610f385780518252601f199092019160209182019101610f19565b5181516020939093036101000a600019018019909116921691909117905260405192018290038220935086925084917fc2340a9e7402ea94935d3768cd4c2307821066405d8100568bf2dad32cc361319150600090a4600160a060020a0389161515610fee576040805160e560020a62461bcd02815260206004820152601560248201527f746f206164647265737320697320696e76616c69640000000000000000000000604482015290519081900360640190fd5b610ff88984612363565b60115461100c90879063ffffffff6123b216565b34101561101857600080fd5b604080517f367605ca000000000000000000000000000000000000000000000000000000008152600160a060020a038b811660048301528c811660248301526001604483015291519184169163367605ca916064808201926020929091908290030181600087803b15801561108c57600080fd5b505af11580156110a0573d6000803e3d6000fd5b505050506040513d60208110156110b657600080fd5b5051156110de576110c7898b612262565b15156110d9576110d9898b60016118d0565b611114565b600c546110f5908a90600160a060020a0316612262565b151561111457600c54611114908a90600160a060020a031660016118d0565b5060019998505050505050505050565b600c54600160a060020a0316331461113b57600080fd5b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60075490565b60105481565b600080611182836119b3565b604080517f15dacbea000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0388811660248301528781166044830152606482018790529151929450908416916315dacbea916084808201926020929091908290030181600087803b1580156111ff57600080fd5b505af1158015611213573d6000803e3d6000fd5b505050506040513d602081101561122957600080fd5b50511515611281576040805160e560020a62461bcd02815260206004820152601860248201527f636f756c64206e6f74207472616e7366657220746f6b656e0000000000000000604482015290519081900360640190fd5b8215156112c6576040805160e560020a62461bcd02815260206004820152600f6024820152600080516020612a81833981519152604482015290519081900360640190fd5b5060008281526013602052604090205480151561131b576040805160e560020a62461bcd02815260206004820152600f6024820152600080516020612a81833981519152604482015290519081900360640190fd5b601054601280548390811061132c57fe5b90600052602060002090600402016003015410151515611396576040805160e560020a62461bcd02815260206004820152601e60248201527fe7baa2e58c85e5b7b2e68f90e58f96efbc8ce4b88de58fafe8bdace7a7bb0000604482015290519081900360640190fd5b6113a18585856123bf565b5050505050565b60006113b986868686866000610cd9565b9695505050505050565b60006113ce83611980565b82106113d957600080fd5b600160a060020a03831660009081526005602052604090208054839081106113fd57fe5b9060005260206000200154905092915050565b60136020526000908152604090205481565b600f5481565b600080805b86518110156114b557611470601154611464868481518110151561144d57fe5b60209081029091010151859063ffffffff6123b216565b9063ffffffff6123b216565b91506114ac878281518110151561148357fe5b906020019060200201518787878581518110151561149d57fe5b906020019060200201516115ea565b5060010161142d565b348211156114c257600080fd5b5060019695505050505050565b60006114da826119b3565b604080517fd9fc4b61000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03878116602483015286811660448301526064820186905291519293509083169163d9fc4b61916084808201926020929091908290030181600087803b15801561155757600080fd5b505af115801561156b573d6000803e3d6000fd5b505050506040513d602081101561158157600080fd5b505115156115d9576040805160e560020a62461bcd02815260206004820152601d60248201527f636f756c64206e6f742073616665207472616e7366657220746f6b656e000000604482015290519081900360640190fd5b6115e484848461244d565b50505050565b600c5460009061160790600160a060020a03168686868686610cd9565b95945050505050565b600061161a61116a565b821061162557600080fd5b600780548390811061163357fe5b90600052602060002001549050919050565b600c54600090600160a060020a0316331461165f57600080fd5b6406fc23ac0082101561167157600080fd5b50601155600190565b600081815260016020526040812054600160a060020a031680151561169e57600080fd5b92915050565b6060806000808415156116ef576040805160e560020a62461bcd02815260206004820152600f6024820152600080516020612a81833981519152604482015290519081900360640190fd5b50600084815260136020526040902054801515611744576040805160e560020a62461bcd02815260206004820152600f6024820152600080516020612a81833981519152604482015290519081900360640190fd5b601280548290811061175257fe5b906000526020600020906004020160010160128281548110151561177257fe5b906000526020600020906004020160020160128381548110151561179257fe5b600091825260209182902060036004909202010154835460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152919285919083018282801561182d5780601f106118025761010080835404028352916020019161182d565b820191906000526020600020905b81548152906001019060200180831161181057829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959850879450925084019050828280156118bb5780601f10611890576101008083540402835291602001916118bb565b820191906000526020600020905b81548152906001019060200180831161189e57829003601f168201915b50505050509150935093509350509193909250565b600160a060020a0382811690841614156118e957600080fd5b600160a060020a03838116600081815260046020908152604080832094871680845294825291829020805460ff1916861515908117909155825190815291517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319281900390910190a3505050565b60115481565b600c54600090600160a060020a0316331461197757600080fd5b50601055600190565b6000600160a060020a038216151561199757600080fd5b50600160a060020a031660009081526003602052604090205490565b600080600d6000600e858154811015156119c957fe5b60009182526020808320909101548352820192909252604001902054600160a060020a0316905080151561169e576040805160e560020a62461bcd02815260206004820152601060248201527f696e76616c69642064656c656761746500000000000000000000000000000000604482015290519081900360640190fd5b600c54600160a060020a031690565b600c54600160a060020a031681565b600a8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b905780601f10610b6557610100808354040283529160200191610b90565b600160a060020a038216331415611adc57600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600082600160a060020a0316611b5f8361167a565b600160a060020a031614611b7257600080fd5b811515611bb7576040805160e560020a62461bcd02815260206004820152600f6024820152600080516020612a81833981519152604482015290519081900360640190fd5b50600081815260136020526040902054801515611c0c576040805160e560020a62461bcd02815260206004820152600f6024820152600080516020612a81833981519152604482015290519081900360640190fd5b6010546012805483908110611c1d57fe5b90600052602060002090600402016003015410151515611c3c57600080fd5b601154604051339180156108fc02916000818181858888f19350505050158015611c6a573d6000803e3d6000fd5b5082600160a060020a03166108fc601283815481101515611c8757fe5b9060005260206000209060040201600301549081150290604051600060405180830381858888f19350505050158015611cc4573d6000803e3d6000fd5b506000601282815481101515611cd657fe5b60009182526020909120600360049092020101556012805482908110611cf857fe5b906000526020600020906004020160030154601282815481101515611d1957fe5b90600052602060002090600402016001016040518082805460018160011615610100020316600290048015611d855780601f10611d63576101008083540402835291820191611d85565b820191906000526020600020905b815481529060010190602001808311611d71575b505091505060405180910390207f29d3a39b862be342ed436605d94ee560dbb25e95cda085d8cfe1eff117147a2a601284815481101515611dc257fe5b6000918252602091829020604080518481526004939093029091016002908101805460018116156101000260001901169190910493830184905292829182019084908015611e515780601f10611e2657610100808354040283529160200191611e51565b820191906000526020600020905b815481529060010190602001808311611e3457829003601f168201915b50509250505060405180910390a3505050565b600d60205260009081526040902054600160a060020a031681565b6000611e8a836119b3565b6040517f2d8bf0c50000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015288811660448501526064840188905260a060848501908152875160a4860152875195965090861694632d8bf0c5948b938b938b938b9360c40190602085019080838360005b83811015611f25578181015183820152602001611f0d565b50505050905090810190601f168015611f525780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b158015611f7557600080fd5b505af1158015611f89573d6000803e3d6000fd5b505050506040513d6020811015611f9f57600080fd5b50511515611ff7576040805160e560020a62461bcd02815260206004820152601d60248201527f636f756c64206e6f742073616665207472616e7366657220746f6b656e000000604482015290519081900360640190fd5b6113a185858585612469565b600e80548290811061201157fe5b600091825260209091200154905081565b606061202d82612290565b151561203857600080fd5b6000828152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156120cb5780601f106120a0576101008083540402835291602001916120cb565b820191906000526020600020905b8154815290600101906020018083116120ae57829003601f168201915b50505050509050919050565b6000818152600d6020526040812054600160a060020a031680151561169e576040805160e560020a62461bcd02815260206004820152601060248201527f696e76616c69642064656c656761746500000000000000000000000000000000604482015290519081900360640190fd5b600c54600090600160a060020a0316331461216057600080fd5b50600f8054600181019091556000818152600d6020526040902054600160a060020a0316156121ff576040805160e560020a62461bcd02815260206004820152602f60248201527f64656c656761746520697320616c72656164792073657420666f72205265645060448201527f61636b6574546f6b656e20747970650000000000000000000000000000000000606482015290519081900360840190fd5b6000818152600d6020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038616908117909155905183927fea230cdda4ad29de0529d49bb502497d3776eab9b0546fa48eeef831e34254d791a35050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600090815260016020526040902054600160a060020a0316151590565b60006122b88261167a565b9050600160a060020a0383811690821614156122d357600080fd5b33600160a060020a03821614806122ef57506122ef8133612262565b15156122fa57600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61236d828261248b565b600780546000838152600860205260408120829055600182018355919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688015550565b8181018281101561169e57fe5b6123c933826124e6565b15156123d457600080fd5b600160a060020a03821615156123e957600080fd5b6123f38382612545565b6123fd83826125b6565b61240782826126bd565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b610aff8383836020604051908101604052806000815250611e7f565b612474848484611176565b61248084848484612706565b15156115e457600080fd5b600160a060020a03821615156124a057600080fd5b6124aa82826126bd565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000806124f28361167a565b905080600160a060020a031684600160a060020a0316148061252d575083600160a060020a031661252284610b9b565b600160a060020a0316145b8061253d575061253d8185612262565b949350505050565b81600160a060020a03166125588261167a565b600160a060020a03161461256b57600080fd5b600081815260026020526040902054600160a060020a0316156125b2576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b5050565b60008060006125c58585612888565b600084815260066020908152604080832054600160a060020a038916845260059092529091205490935061260090600163ffffffff61291e16565b600160a060020a03861660009081526005602052604090208054919350908390811061262857fe5b90600052602060002001549050806005600087600160a060020a0316600160a060020a031681526020019081526020016000208481548110151561266857fe5b6000918252602080832090910192909255600160a060020a038716815260059091526040902080549061269f906000198301612a46565b50600093845260066020526040808520859055908452909220555050565b60006126c98383612930565b50600160a060020a039091166000908152600560209081526040808320805460018101825590845282842081018590559383526006909152902055565b60008061271b85600160a060020a03166129c0565b151561272a576001915061287f565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b838110156127bd5781810151838201526020016127a5565b50505050905090810190601f1680156127ea5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561280c57600080fd5b505af1158015612820573d6000803e3d6000fd5b505050506040513d602081101561283657600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b81600160a060020a031661289b8261167a565b600160a060020a0316146128ae57600080fd5b600160a060020a0382166000908152600360205260409020546128d890600163ffffffff61291e16565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008282111561292a57fe5b50900390565b600081815260016020526040902054600160a060020a03161561295257600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881690811790915584526003909152909120546129a0916123b2565b600160a060020a0390921660009081526003602052604090209190915550565b6000903b1190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a0957805160ff1916838001178555612a36565b82800160010185558215612a36579182015b82811115612a36578251825591602001919060010190612a1b565b50612a42929150612a66565b5090565b815481835581811115610aff57600083815260209020610aff9181019083015b610b9891905b80821115612a425760008155600101612a6c5600746f6b656e206e6f742065786973740000000000000000000000000000000000a165627a7a72305820fd61c867824e1240090f5d796cf4be9888cd0512740a2c602b606bcbe08eed180029";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TRANSFERFROMANDWITHDRAWHPB = "transferFromAndwithdrawHpb";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_MINLIMIT = "minLimit";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_MINTDEDAULTOFWITHDRAW = "mintDedaultOfWithdraw";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_REDPACKETTOKENINDEXS = "redPacketTokenIndexs";

    public static final String FUNC_DELEGATECOUNT = "delegateCount";

    public static final String FUNC_MINTDEDAULTBATCH = "mintDedaultBatch";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_MINTDEDAULT = "mintDedault";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_SETMINERNUM = "setMinerNum";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_GETREDPACKETTOKENBYTOKENID = "getRedPacketTokenByTokenId";

    public static final String FUNC_SETAPPROVALFORALLWITHTOKENOWNER = "setApprovalForAllWithTokenOwner";

    public static final String FUNC_MINERNUM = "minerNum";

    public static final String FUNC_SETMINLIMIT = "setMinLimit";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETTOKENDELEGATE = "getTokenDelegate";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_WITHDRAWHPBBYTOKENID = "withdrawHpbByTokenId";

    public static final String FUNC_DELEGATES = "delegates";

    public static final String FUNC_REDPACKETTOKENIDS = "redPacketTokenIds";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_GETDELEGATE = "getDelegate";

    public static final String FUNC_ADDDELEGATE = "addDelegate";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final Event RECEIVEDHPB_EVENT = new Event("ReceivedHpb",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DELEGATEADDED_EVENT = new Event("DelegateAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event MINT_EVENT = new Event("Mint",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event WITHDRAW_EVENT = new Event("Withdraw",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ADDREDPACKETTOKEN_EVENT = new Event("AddRedPacketToken",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    protected RedPacketToken(String contractAddress, Web3 web3, Credentials credentials,
                             BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3, getTransactionManager(web3, credentials), getContractGasProvider(gasPrice, gasLimit));
    }

    protected RedPacketToken(String contractAddress, Web3 web3,
                             TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3, transactionManager, getContractGasProvider(gasPrice, gasLimit));
    }

    protected RedPacketToken(String contractAddress, Web3 web3,
                             TransactionManager transactionManager, ContractGasProvider gasProvider) {
        super(BINARY, contractAddress, web3, transactionManager, gasProvider);
    }

    public RemoteCall<Bool> supportsInterface(Bytes4 interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(interfaceId),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> transferFromAndwithdrawHpb(Address from, Address to,
                                                                     Uint256 tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROMANDWITHDRAWHPB,
                Arrays.<Type>asList(from, to, tokenId),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Utf8String> name() {
        final Function function = new Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> getApproved(Uint256 tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED,
                Arrays.<Type>asList(tokenId),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> approve(Address to, Uint256 tokenId) {
        final Function function = new Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(to, tokenId),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mint(Address _withdraw, Address _to, Utf8String _name,
                                               Utf8String _desc, Uint256 _value, Uint256 _delegateID, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MINT,
                Arrays.<Type>asList(_withdraw, _to, _name, _desc, _value, _delegateID),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> setOwner(Address _owner) {
        final Function function = new Function(
                FUNC_SETOWNER,
                Arrays.<Type>asList(_owner),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minLimit() {
        final Function function = new Function(FUNC_MINLIMIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> transferFrom(Address from, Address to, Uint256 tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(from, to, tokenId),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mintDedaultOfWithdraw(Address _withdraw, Address _to,
                                                                Utf8String _name, Utf8String _desc, Uint256 _value, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MINTDEDAULTOFWITHDRAW,
                Arrays.<Type>asList(_withdraw, _to, _name, _desc, _value),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Uint256> tokenOfOwnerByIndex(Address owner, Uint256 index) {
        final Function function = new Function(FUNC_TOKENOFOWNERBYINDEX,
                Arrays.<Type>asList(owner, index),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> redPacketTokenIndexs(Uint256 param0) {
        final Function function = new Function(FUNC_REDPACKETTOKENINDEXS,
                Arrays.<Type>asList(param0),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> delegateCount() {
        final Function function = new Function(FUNC_DELEGATECOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> mintDedaultBatch(DynamicArray<Address> _tos,
                                                           Utf8String _name, Utf8String _desc, DynamicArray<Uint256> _values,
                                                           BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MINTDEDAULTBATCH,
                Arrays.<Type>asList(_tos, _name, _desc, _values),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> safeTransferFrom(Address from, Address to,
                                                           Uint256 tokenId) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM,
                Arrays.<Type>asList(from, to, tokenId),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mintDedault(Address _to, Utf8String _name,
                                                      Utf8String _desc, Uint256 _value, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MINTDEDAULT,
                Arrays.<Type>asList(_to, _name, _desc, _value),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Uint256> tokenByIndex(Uint256 index) {
        final Function function = new Function(FUNC_TOKENBYINDEX,
                Arrays.<Type>asList(index),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> setMinerNum(Uint256 _minerNum) {
        final Function function = new Function(
                FUNC_SETMINERNUM,
                Arrays.<Type>asList(_minerNum),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> ownerOf(Uint256 tokenId) {
        final Function function = new Function(FUNC_OWNEROF,
                Arrays.<Type>asList(tokenId),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple3<Utf8String, Utf8String, Uint256>> getRedPacketTokenByTokenId(Uint256 tokenId) {
        final Function function = new Function(FUNC_GETREDPACKETTOKENBYTOKENID,
                Arrays.<Type>asList(tokenId),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<Utf8String, Utf8String, Uint256>>(
                new Callable<Tuple3<Utf8String, Utf8String, Uint256>>() {
                    @Override
                    public Tuple3<Utf8String, Utf8String, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Utf8String, Utf8String, Uint256>(
                                (Utf8String) results.get(0),
                                (Utf8String) results.get(1),
                                (Uint256) results.get(2));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setApprovalForAllWithTokenOwner(Address tokenOwner,
                                                                          Address to, Bool approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALLWITHTOKENOWNER,
                Arrays.<Type>asList(tokenOwner, to, approved),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> minerNum() {
        final Function function = new Function(FUNC_MINERNUM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> setMinLimit(Uint256 _minLimit) {
        final Function function = new Function(
                FUNC_SETMINLIMIT,
                Arrays.<Type>asList(_minLimit),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> balanceOf(Address owner) {
        final Function function = new Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(owner),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> getTokenDelegate(Uint256 id) {
        final Function function = new Function(FUNC_GETTOKENDELEGATE,
                Arrays.<Type>asList(id),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> getOwner() {
        final Function function = new Function(FUNC_GETOWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> symbol() {
        final Function function = new Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> setApprovalForAll(Address to, Bool approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(to, approved),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawHpbByTokenId(Address tokenOwner, Uint256 tokenId,
                                                               BigInteger weiValue) {
        final Function function = new Function(
                FUNC_WITHDRAWHPBBYTOKENID,
                Arrays.<Type>asList(tokenOwner, tokenId),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Address> delegates(Uint256 param0) {
        final Function function = new Function(FUNC_DELEGATES,
                Arrays.<Type>asList(param0),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> safeTransferFrom(Address from, Address to,
                                                           Uint256 tokenId, DynamicBytes data) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM,
                Arrays.<Type>asList(from, to, tokenId, data),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> redPacketTokenIds(Uint256 param0) {
        final Function function = new Function(FUNC_REDPACKETTOKENIDS,
                Arrays.<Type>asList(param0),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> tokenURI(Uint256 tokenId) {
        final Function function = new Function(FUNC_TOKENURI,
                Arrays.<Type>asList(tokenId),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> getDelegate(Uint256 id) {
        final Function function = new Function(FUNC_GETDELEGATE,
                Arrays.<Type>asList(id),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addDelegate(Address delegate) {
        final Function function = new Function(
                FUNC_ADDDELEGATE,
                Arrays.<Type>asList(delegate),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> isApprovedForAll(Address owner, Address operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(owner, operator),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public static RemoteCall<RedPacketToken> deploy(Web3 web3, Credentials credentials,
                                                    BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(RedPacketToken.class, web3, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static RemoteCall<RedPacketToken> deploy(Web3 web3,
                                                    TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
                                                    BigInteger initialWeiValue) {
        return deployRemoteCall(RedPacketToken.class, web3, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public List<ReceivedHpbEventResponse> getReceivedHpbEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RECEIVEDHPB_EVENT, transactionReceipt);
        ArrayList<ReceivedHpbEventResponse> responses = new ArrayList<ReceivedHpbEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ReceivedHpbEventResponse typedResponse = new ReceivedHpbEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ReceivedHpbEventResponse> receivedHpbEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, ReceivedHpbEventResponse>() {
            @Override
            public ReceivedHpbEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RECEIVEDHPB_EVENT, log);
                ReceivedHpbEventResponse typedResponse = new ReceivedHpbEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<ReceivedHpbEventResponse> receivedHpbEventObservable(DefaultBlockParameter startBlock,
                                                                           DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECEIVEDHPB_EVENT));
        return receivedHpbEventObservable(filter);
    }

    public List<DelegateAddedEventResponse> getDelegateAddedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELEGATEADDED_EVENT, transactionReceipt);
        ArrayList<DelegateAddedEventResponse> responses = new ArrayList<DelegateAddedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DelegateAddedEventResponse typedResponse = new DelegateAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.delegate = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.delegateID = (Uint256) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DelegateAddedEventResponse> delegateAddedEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, DelegateAddedEventResponse>() {
            @Override
            public DelegateAddedEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DELEGATEADDED_EVENT, log);
                DelegateAddedEventResponse typedResponse = new DelegateAddedEventResponse();
                typedResponse.log = log;
                typedResponse.delegate = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.delegateID = (Uint256) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<DelegateAddedEventResponse> delegateAddedEventObservable(DefaultBlockParameter startBlock,
                                                                               DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELEGATEADDED_EVENT));
        return delegateAddedEventObservable(filter);
    }

    public List<MintEventResponse> getMintEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MINT_EVENT, transactionReceipt);
        ArrayList<MintEventResponse> responses = new ArrayList<MintEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MintEventResponse typedResponse = new MintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.delegateID = (Uint256) eventValues.getIndexedValues().get(0);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.name = (Utf8String) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MintEventResponse> mintEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, MintEventResponse>() {
            @Override
            public MintEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MINT_EVENT, log);
                MintEventResponse typedResponse = new MintEventResponse();
                typedResponse.log = log;
                typedResponse.delegateID = (Uint256) eventValues.getIndexedValues().get(0);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.name = (Utf8String) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Observable<MintEventResponse> mintEventObservable(DefaultBlockParameter startBlock,
                                                             DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINT_EVENT));
        return mintEventObservable(filter);
    }

    public List<WithdrawEventResponse> getWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAW_EVENT, transactionReceipt);
        ArrayList<WithdrawEventResponse> responses = new ArrayList<WithdrawEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawEventResponse typedResponse = new WithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (Utf8String) eventValues.getIndexedValues().get(0);
            typedResponse.value = (Uint256) eventValues.getIndexedValues().get(1);
            typedResponse.desc = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WithdrawEventResponse> withdrawEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, WithdrawEventResponse>() {
            @Override
            public WithdrawEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAW_EVENT, log);
                WithdrawEventResponse typedResponse = new WithdrawEventResponse();
                typedResponse.log = log;
                typedResponse.name = (Utf8String) eventValues.getIndexedValues().get(0);
                typedResponse.value = (Uint256) eventValues.getIndexedValues().get(1);
                typedResponse.desc = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<WithdrawEventResponse> withdrawEventObservable(DefaultBlockParameter startBlock,
                                                                     DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAW_EVENT));
        return withdrawEventObservable(filter);
    }

    public List<AddRedPacketTokenEventResponse> getAddRedPacketTokenEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDREDPACKETTOKEN_EVENT, transactionReceipt);
        ArrayList<AddRedPacketTokenEventResponse> responses = new ArrayList<AddRedPacketTokenEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddRedPacketTokenEventResponse typedResponse = new AddRedPacketTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.redPacketTokenIndex = (Uint256) eventValues.getIndexedValues().get(0);
            typedResponse.tokenId = (Uint256) eventValues.getIndexedValues().get(1);
            typedResponse.name = (Bytes32) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddRedPacketTokenEventResponse> addRedPacketTokenEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, AddRedPacketTokenEventResponse>() {
            @Override
            public AddRedPacketTokenEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADDREDPACKETTOKEN_EVENT, log);
                AddRedPacketTokenEventResponse typedResponse = new AddRedPacketTokenEventResponse();
                typedResponse.log = log;
                typedResponse.redPacketTokenIndex = (Uint256) eventValues.getIndexedValues().get(0);
                typedResponse.tokenId = (Uint256) eventValues.getIndexedValues().get(1);
                typedResponse.name = (Bytes32) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Observable<AddRedPacketTokenEventResponse> addRedPacketTokenEventObservable(DefaultBlockParameter startBlock,
                                                                                       DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDREDPACKETTOKEN_EVENT));
        return addRedPacketTokenEventObservable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.tokenId = (Uint256) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.tokenId = (Uint256) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock,
                                                                     DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventObservable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.approved = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.tokenId = (Uint256) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.approved = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.tokenId = (Uint256) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock,
                                                                     DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventObservable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.approved = (Bool) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalForAllEventResponse> approvalForAllEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.approved = (Bool) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<ApprovalForAllEventResponse> approvalForAllEventObservable(DefaultBlockParameter startBlock,
                                                                                 DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventObservable(filter);
    }

    public static RedPacketToken load(String contractAddress, Web3 web3, Credentials credentials,
                                      BigInteger gasPrice, BigInteger gasLimit) {
        return new RedPacketToken(contractAddress, web3, credentials, gasPrice, gasLimit);
    }

    public static RedPacketToken load(String contractAddress, Web3 web3,
                                      TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RedPacketToken(contractAddress, web3, transactionManager, gasPrice, gasLimit);
    }

    public static class ReceivedHpbEventResponse {
        public Log log;

        public Address sender;

        public Uint256 amount;
    }

    public static class DelegateAddedEventResponse {
        public Log log;

        public Address delegate;

        public Uint256 delegateID;
    }

    public static class MintEventResponse {
        public Log log;

        public Uint256 delegateID;

        public Address to;

        public Utf8String name;
    }

    public static class WithdrawEventResponse {
        public Log log;

        public Utf8String name;

        public Uint256 value;

        public Utf8String desc;
    }

    public static class AddRedPacketTokenEventResponse {
        public Log log;

        public Uint256 redPacketTokenIndex;

        public Uint256 tokenId;

        public Bytes32 name;
    }

    public static class TransferEventResponse {
        public Log log;

        public Address from;

        public Address to;

        public Uint256 tokenId;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public Address owner;

        public Address approved;

        public Uint256 tokenId;
    }

    public static class ApprovalForAllEventResponse {
        public Log log;

        public Address owner;

        public Address operator;

        public Bool approved;
    }
}
